import { require_react_dom } from "./chunk-46SKMPFG.js";
import { require_react } from "./chunk-ZEZLQ4G4.js";
import { defineCustomElement, defineCustomElement10, defineCustomElement11, defineCustomElement12, defineCustomElement13, defineCustomElement14, defineCustomElement15, defineCustomElement16, defineCustomElement17, defineCustomElement18, defineCustomElement19, defineCustomElement2, defineCustomElement20, defineCustomElement21, defineCustomElement22, defineCustomElement23, defineCustomElement24, defineCustomElement25, defineCustomElement26, defineCustomElement27, defineCustomElement28, defineCustomElement29, defineCustomElement3, defineCustomElement30, defineCustomElement31, defineCustomElement32, defineCustomElement33, defineCustomElement34, defineCustomElement35, defineCustomElement36, defineCustomElement37, defineCustomElement38, defineCustomElement39, defineCustomElement4, defineCustomElement40, defineCustomElement41, defineCustomElement42, defineCustomElement43, defineCustomElement44, defineCustomElement45, defineCustomElement46, defineCustomElement47, defineCustomElement48, defineCustomElement49, defineCustomElement5, defineCustomElement50, defineCustomElement51, defineCustomElement52, defineCustomElement53, defineCustomElement54, defineCustomElement55, defineCustomElement56, defineCustomElement57, defineCustomElement58, defineCustomElement59, defineCustomElement6, defineCustomElement60, defineCustomElement61, defineCustomElement62, defineCustomElement63, defineCustomElement64, defineCustomElement65, defineCustomElement66, defineCustomElement67, defineCustomElement68, defineCustomElement69, defineCustomElement7, defineCustomElement70, defineCustomElement71, defineCustomElement72, defineCustomElement73, defineCustomElement74, defineCustomElement75, defineCustomElement76, defineCustomElement77, defineCustomElement78, defineCustomElement79, defineCustomElement8, defineCustomElement80, defineCustomElement81, defineCustomElement82, defineCustomElement9 } from "./chunk-YP5N3WU6.js";
import "./chunk-45RGEOLZ.js";
import { __rest } from "./chunk-OJQNUBSF.js";
import { __toESM } from "./chunk-UG6XUGBP.js";
// node_modules/@tarojs/components/lib/react/components.js
var import_react4 = __toESM(require_react());
// node_modules/@tarojs/components/lib/react/helper.js
var manipulatePropsFunction = (originalProps, propsToPass = {})=>{
    const { dangerouslySetInnerHTML, style } = originalProps;
    if (typeof style !== "string") {
        propsToPass.style = style;
    }
    return Object.assign(Object.assign({}, propsToPass), {
        dangerouslySetInnerHTML
    });
};
// node_modules/@tarojs/components/lib/react/react-component-lib/createComponent.js
var import_react2 = __toESM(require_react());
// node_modules/@tarojs/components/lib/react/react-component-lib/utils/index.js
var import_react = __toESM(require_react());
// node_modules/@tarojs/components/lib/react/react-component-lib/utils/attachProps.js
var import_react_dom = __toESM(require_react_dom());
// node_modules/@tarojs/components/lib/react/react-component-lib/utils/case.js
var dashToPascalCase = (str)=>str.toLowerCase().split("-").map((segment)=>segment.charAt(0).toUpperCase() + segment.slice(1)).join("");
var camelToDashCase = (str)=>str.replace(/([A-Z])/g, (m)=>`-${m[0].toLowerCase()}`);
// node_modules/@tarojs/components/lib/react/react-component-lib/utils/attachProps.js
var arrayToMap = (arr)=>{
    const map = /* @__PURE__ */ new Map();
    arr.forEach((s)=>map.set(s, s));
    return map;
};
var getClassName = (classList, newProps, oldProps)=>{
    const newClassProp = newProps.className || newProps.class;
    const oldClassProp = oldProps.className || oldProps.class;
    const currentClasses = arrayToMap(classList);
    const incomingPropClasses = arrayToMap(newClassProp ? newClassProp.split(" ") : []);
    const oldPropClasses = arrayToMap(oldClassProp ? oldClassProp.split(" ") : []);
    const finalClassNames = [];
    currentClasses.forEach((currentClass)=>{
        if (incomingPropClasses.has(currentClass)) {
            finalClassNames.push(currentClass);
            incomingPropClasses.delete(currentClass);
        } else if (!oldPropClasses.has(currentClass)) {
            finalClassNames.push(currentClass);
        }
    });
    incomingPropClasses.forEach((s)=>finalClassNames.push(s));
    return finalClassNames.join(" ");
};
var isCoveredByReact = (__eventNameSuffix)=>false;
function getComponentName(node) {
    return node.tagName.replace(/^TARO-/, "").replace(/-CORE$/, "");
}
function getControlledValue(node) {
    const componentName = getComponentName(node);
    if ([
        "INPUT",
        "TEXTAREA",
        "SLIDER",
        "PICKER"
    ].includes(componentName)) {
        return "value";
    } else if (componentName === "SWITCH") {
        return "checked";
    } else {
        return null;
    }
}
function getPropsAfterReactUpdate(node) {
    const key = Object.keys(node).find((key2)=>key2.includes("__reactProps"));
    if (key) {
        return node[key];
    } else {
        return null;
    }
}
function finishedEventHandler(node) {
    const controlledValue = getControlledValue(node);
    if (!controlledValue) return;
    (0, import_react_dom.flushSync)();
    const newProps = getPropsAfterReactUpdate(node);
    if ((newProps === null || newProps === void 0 ? void 0 : newProps.hasOwnProperty(controlledValue)) && newProps[controlledValue] !== node[controlledValue]) {
        node[controlledValue] = newProps[controlledValue];
        node.setAttribute(controlledValue, newProps[controlledValue]);
    }
}
var syncEvent = (node, eventName, newEventHandler)=>{
    const eventStore = node.__events || (node.__events = {});
    const oldEventHandler = eventStore[eventName];
    if (!newEventHandler && oldEventHandler) {
        node.removeEventListener(eventName, oldEventHandler);
    } else {
        if (oldEventHandler) {
            if (oldEventHandler.fn === newEventHandler) {
                return;
            } else {
                node.removeEventListener(eventName, oldEventHandler);
            }
        }
        const listener = eventStore[eventName] = function(e) {
            (0, import_react_dom.unstable_batchedUpdates)(()=>newEventHandler.call(this, e));
            finishedEventHandler(node);
        };
        listener.fn = newEventHandler;
        node.addEventListener(eventName, listener);
    }
};
var attachProps = (node, newProps, oldProps = {})=>{
    if (node instanceof Element) {
        Object.keys(oldProps).forEach((name)=>{
            if ([
                "style",
                "children",
                "ref",
                "class",
                "className",
                "forwardedRef"
            ].includes(name)) {
                return;
            }
            if (!newProps.hasOwnProperty(name)) {
                if (/^on([A-Z].*)/.test(name)) {
                    const eventName = name.substring(2);
                    const eventNameLc = eventName.toLowerCase();
                    if (!isCoveredByReact(eventNameLc)) {
                        syncEvent(node, eventNameLc);
                    }
                } else {
                    node[name] = null;
                    node.removeAttribute(camelToDashCase(name));
                }
            }
        });
        node.className = getClassName(node.classList, newProps, oldProps);
        Object.keys(newProps).forEach((name)=>{
            if (name === "style" && typeof newProps[name] !== "string" || [
                "children",
                "ref",
                "class",
                "className",
                "forwardedRef"
            ].includes(name)) {
                return;
            }
            if (/^on([A-Z].*)/.test(name)) {
                const eventName = name.substring(2);
                const eventNameLc = eventName.toLowerCase();
                if (!isCoveredByReact(eventNameLc)) {
                    syncEvent(node, eventNameLc, newProps[name]);
                }
            } else {
                node[name] = newProps[name];
                const propType = typeof newProps[name];
                if (propType === "string") {
                    node.setAttribute(camelToDashCase(name), newProps[name]);
                }
            }
        });
        const controlledValue = getControlledValue(node);
        if (controlledValue && newProps.hasOwnProperty(controlledValue)) {
            const handleChangeEvent = [
                "INPUT",
                "TEXTAREA"
            ].includes(getComponentName(node)) ? "input" : "change";
            node.__events || (node.__events = {});
            if (!node.__events.hasOwnProperty(handleChangeEvent)) {
                syncEvent(node, handleChangeEvent, function() {});
            }
        }
    }
};
function applyUnControlledDefaultValue(node, props) {
    const controlledValue = getControlledValue(node);
    if (!controlledValue) return;
    const defaultValueName = "default" + controlledValue.charAt(0).toUpperCase() + controlledValue.slice(1);
    if (!props.hasOwnProperty(controlledValue) && props.hasOwnProperty(defaultValueName)) {
        node[controlledValue] = props[defaultValueName];
        node.setAttribute(controlledValue, props[defaultValueName]);
    }
}
// node_modules/@tarojs/components/lib/react/react-component-lib/utils/index.js
var setRef = (ref, value)=>{
    if (typeof ref === "function") {
        ref(value);
    } else if (ref != null) {
        ref.current = value;
    }
};
var mergeRefs = (...refs)=>{
    return (value)=>{
        refs.forEach((ref)=>{
            setRef(ref, value);
        });
    };
};
var createForwardRef = (ReactComponent, displayName)=>{
    const forwardRef = (props, ref)=>{
        return import_react.default.createElement(ReactComponent, Object.assign({}, props, {
            forwardedRef: ref
        }));
    };
    forwardRef.displayName = displayName;
    return import_react.default.forwardRef(forwardRef);
};
// node_modules/@tarojs/components/lib/react/react-component-lib/createComponent.js
var createReactComponent = (tagName, ReactComponentContext, manipulatePropsFunction2, defineCustomElement84)=>{
    if (defineCustomElement84 !== void 0) {
        defineCustomElement84();
    }
    const displayName = dashToPascalCase(tagName);
    const ReactComponent = class extends import_react2.default.Component {
        componentDidMount() {
            applyUnControlledDefaultValue(this.componentEl, this.props);
            this.componentDidUpdate(this.props);
        }
        componentDidUpdate(prevProps) {
            attachProps(this.componentEl, this.props, prevProps);
        }
        render() {
            const _a = this.props, { children, forwardedRef, className, ref, style } = _a, cProps = __rest(_a, [
                "children",
                "forwardedRef",
                "className",
                "ref",
                "style"
            ]);
            let propsToPass = Object.keys(cProps).reduce((acc, name)=>{
                const value = cProps[name];
                if (name.indexOf("on") === 0 && name[2] === name[2].toUpperCase()) {
                    const eventName = name.substring(2).toLowerCase();
                    if (typeof document !== "undefined" && isCoveredByReact(eventName)) {
                        acc[name] = value;
                    }
                } else {
                    const type = typeof value;
                    if ([
                        "string",
                        "boolean",
                        "number"
                    ].includes(type)) {
                        acc[camelToDashCase(name)] = value;
                    }
                }
                return acc;
            }, {});
            if (manipulatePropsFunction2) {
                propsToPass = manipulatePropsFunction2(this.props, propsToPass);
            }
            const newProps = Object.assign(Object.assign({}, propsToPass), {
                ref: mergeRefs(forwardedRef, this.setComponentElRef)
            });
            return (0, import_react2.createElement)(tagName, newProps, children);
        }
        static get displayName() {
            return displayName;
        }
        // eslint-disable-next-line no-useless-constructor
        constructor(props){
            super(props);
            this.setComponentElRef = (element)=>{
                this.componentEl = element;
            };
        }
    };
    if (ReactComponentContext) {
        ReactComponent.contextType = ReactComponentContext;
    }
    return createForwardRef(ReactComponent, displayName);
};
// node_modules/@tarojs/components/lib/react/react-component-lib/createOverlayComponent.js
var import_react3 = __toESM(require_react());
var import_react_dom2 = __toESM(require_react_dom());
// node_modules/@tarojs/components/lib/react/components.js
var Ad = createReactComponent("taro-ad-core", void 0, manipulatePropsFunction, defineCustomElement);
var AdCustom = createReactComponent("taro-ad-custom-core", void 0, manipulatePropsFunction, defineCustomElement2);
var AnimationVideo = createReactComponent("taro-animation-video-core", void 0, manipulatePropsFunction, defineCustomElement3);
var AnimationView = createReactComponent("taro-animation-view-core", void 0, manipulatePropsFunction, defineCustomElement4);
var ArCamera = createReactComponent("taro-ar-camera-core", void 0, manipulatePropsFunction, defineCustomElement5);
var Audio = createReactComponent("taro-audio-core", void 0, manipulatePropsFunction, defineCustomElement6);
var AwemeData = createReactComponent("taro-aweme-data-core", void 0, manipulatePropsFunction, defineCustomElement7);
var Block = import_react4.Fragment;
var Button = createReactComponent("taro-button-core", void 0, manipulatePropsFunction, defineCustomElement8);
var Camera = createReactComponent("taro-camera-core", void 0, manipulatePropsFunction, defineCustomElement9);
var Canvas = createReactComponent("taro-canvas-core", void 0, manipulatePropsFunction, defineCustomElement10);
var ChannelLive = createReactComponent("taro-channel-live-core", void 0, manipulatePropsFunction, defineCustomElement11);
var ChannelVideo = createReactComponent("taro-channel-video-core", void 0, manipulatePropsFunction, defineCustomElement12);
var Checkbox = createReactComponent("taro-checkbox-core", void 0, manipulatePropsFunction, defineCustomElement13);
var CheckboxGroup = createReactComponent("taro-checkbox-group-core", void 0, manipulatePropsFunction, defineCustomElement14);
var CommentDetail = createReactComponent("taro-comment-detail-core", void 0, manipulatePropsFunction, defineCustomElement15);
var CommentList = createReactComponent("taro-comment-list-core", void 0, manipulatePropsFunction, defineCustomElement16);
var ContactButton = createReactComponent("taro-contact-button-core", void 0, manipulatePropsFunction, defineCustomElement17);
var CoverImage = createReactComponent("taro-cover-image-core", void 0, manipulatePropsFunction, defineCustomElement18);
var CoverView = createReactComponent("taro-cover-view-core", void 0, manipulatePropsFunction, defineCustomElement19);
var CustomWrapper = createReactComponent("taro-custom-wrapper-core", void 0, manipulatePropsFunction, defineCustomElement20);
var Editor = createReactComponent("taro-editor-core", void 0, manipulatePropsFunction, defineCustomElement21);
var FollowSwan = createReactComponent("taro-follow-swan-core", void 0, manipulatePropsFunction, defineCustomElement22);
var Form = createReactComponent("taro-form-core", void 0, manipulatePropsFunction, defineCustomElement23);
var FunctionalPageNavigator = createReactComponent("taro-functional-page-navigator-core", void 0, manipulatePropsFunction, defineCustomElement24);
var GridView = createReactComponent("taro-grid-view-core", void 0, manipulatePropsFunction, defineCustomElement25);
var Icon = createReactComponent("taro-icon-core", void 0, manipulatePropsFunction, defineCustomElement26);
var Image = createReactComponent("taro-image-core", void 0, manipulatePropsFunction, defineCustomElement27);
var InlinePaymentPanel = createReactComponent("taro-inline-payment-panel-core", void 0, manipulatePropsFunction, defineCustomElement28);
var Input = createReactComponent("taro-input-core", void 0, manipulatePropsFunction, defineCustomElement29);
var KeyboardAccessory = createReactComponent("taro-keyboard-accessory-core", void 0, manipulatePropsFunction, defineCustomElement30);
var Label = createReactComponent("taro-label-core", void 0, manipulatePropsFunction, defineCustomElement31);
var Lifestyle = createReactComponent("taro-lifestyle-core", void 0, manipulatePropsFunction, defineCustomElement32);
var Like = createReactComponent("taro-like-core", void 0, manipulatePropsFunction, defineCustomElement33);
var ListView = createReactComponent("taro-list-view-core", void 0, manipulatePropsFunction, defineCustomElement34);
var LivePlayer = createReactComponent("taro-live-player-core", void 0, manipulatePropsFunction, defineCustomElement35);
var LivePusher = createReactComponent("taro-live-pusher-core", void 0, manipulatePropsFunction, defineCustomElement36);
var Login = createReactComponent("taro-login-core", void 0, manipulatePropsFunction, defineCustomElement37);
var Lottie = createReactComponent("taro-lottie-core", void 0, manipulatePropsFunction, defineCustomElement38);
var Map2 = createReactComponent("taro-map-core", void 0, manipulatePropsFunction, defineCustomElement39);
var MatchMedia = createReactComponent("taro-match-media-core", void 0, manipulatePropsFunction, defineCustomElement40);
var MovableArea = createReactComponent("taro-movable-area-core", void 0, manipulatePropsFunction, defineCustomElement41);
var MovableView = createReactComponent("taro-movable-view-core", void 0, manipulatePropsFunction, defineCustomElement42);
var NativeSlot = createReactComponent("taro-native-slot-core", void 0, manipulatePropsFunction, defineCustomElement43);
var NavigationBar = createReactComponent("taro-navigation-bar-core", void 0, manipulatePropsFunction, defineCustomElement44);
var Navigator = createReactComponent("taro-navigator-core", void 0, manipulatePropsFunction, defineCustomElement45);
var OfficialAccount = createReactComponent("taro-official-account-core", void 0, manipulatePropsFunction, defineCustomElement46);
var OpenData = createReactComponent("taro-open-data-core", void 0, manipulatePropsFunction, defineCustomElement47);
var PageContainer = createReactComponent("taro-page-container-core", void 0, manipulatePropsFunction, defineCustomElement48);
var PageMeta = createReactComponent("taro-page-meta-core", void 0, manipulatePropsFunction, defineCustomElement49);
var Picker = createReactComponent("taro-picker-core", void 0, manipulatePropsFunction, defineCustomElement50);
var PickerGroup = createReactComponent("taro-picker-group", void 0, manipulatePropsFunction, defineCustomElement51);
var PickerViewColumn = createReactComponent("taro-picker-view-column-core", void 0, manipulatePropsFunction, defineCustomElement52);
var PickerView = createReactComponent("taro-picker-view-core", void 0, manipulatePropsFunction, defineCustomElement53);
var Progress = createReactComponent("taro-progress-core", void 0, manipulatePropsFunction, defineCustomElement54);
var PullToRefresh = createReactComponent("taro-pull-to-refresh-core", void 0, manipulatePropsFunction, defineCustomElement55);
var Radio = createReactComponent("taro-radio-core", void 0, manipulatePropsFunction, defineCustomElement56);
var RadioGroup = createReactComponent("taro-radio-group-core", void 0, manipulatePropsFunction, defineCustomElement57);
var RichText = createReactComponent("taro-rich-text-core", void 0, manipulatePropsFunction, defineCustomElement58);
var RootPortal = createReactComponent("taro-root-portal-core", void 0, manipulatePropsFunction, defineCustomElement59);
var RtcRoom = createReactComponent("taro-rtc-room-core", void 0, manipulatePropsFunction, defineCustomElement60);
var RtcRoomItem = createReactComponent("taro-rtc-room-item-core", void 0, manipulatePropsFunction, defineCustomElement61);
var ScrollView = createReactComponent("taro-scroll-view-core", void 0, manipulatePropsFunction, defineCustomElement62);
var ShareElement = createReactComponent("taro-share-element-core", void 0, manipulatePropsFunction, defineCustomElement63);
var Slider = createReactComponent("taro-slider-core", void 0, manipulatePropsFunction, defineCustomElement64);
var Slot = createReactComponent("taro-slot-core", void 0, manipulatePropsFunction, defineCustomElement65);
var Snapshot = createReactComponent("taro-snapshot-core", void 0, manipulatePropsFunction, defineCustomElement66);
var StickyHeader = createReactComponent("taro-sticky-header-core", void 0, manipulatePropsFunction, defineCustomElement67);
var StickySection = createReactComponent("taro-sticky-section-core", void 0, manipulatePropsFunction, defineCustomElement68);
var Swiper = createReactComponent("taro-swiper-core", void 0, manipulatePropsFunction, defineCustomElement69);
var SwiperItem = createReactComponent("taro-swiper-item-core", void 0, manipulatePropsFunction, defineCustomElement70);
var Switch = createReactComponent("taro-switch-core", void 0, manipulatePropsFunction, defineCustomElement71);
var TabItem = createReactComponent("taro-tab-item-core", void 0, manipulatePropsFunction, defineCustomElement72);
var Tabbar = createReactComponent("taro-tabbar", void 0, manipulatePropsFunction, defineCustomElement73);
var Tabs = createReactComponent("taro-tabs-core", void 0, manipulatePropsFunction, defineCustomElement74);
var Text = createReactComponent("taro-text-core", void 0, manipulatePropsFunction, defineCustomElement75);
var Textarea = createReactComponent("taro-textarea-core", void 0, manipulatePropsFunction, defineCustomElement76);
var VideoControl = createReactComponent("taro-video-control", void 0, manipulatePropsFunction, defineCustomElement77);
var Video = createReactComponent("taro-video-core", void 0, manipulatePropsFunction, defineCustomElement78);
var VideoDanmu = createReactComponent("taro-video-danmu", void 0, manipulatePropsFunction, defineCustomElement79);
var View = createReactComponent("taro-view-core", void 0, manipulatePropsFunction, defineCustomElement80);
var VoipRoom = createReactComponent("taro-voip-room-core", void 0, manipulatePropsFunction, defineCustomElement81);
var WebView = createReactComponent("taro-web-view-core", void 0, manipulatePropsFunction, defineCustomElement82);
export { Ad, AdCustom, AnimationVideo, AnimationView, ArCamera, Audio, AwemeData, Block, Button, Camera, Canvas, ChannelLive, ChannelVideo, Checkbox, CheckboxGroup, CommentDetail, CommentList, ContactButton, CoverImage, CoverView, CustomWrapper, Editor, FollowSwan, Form, FunctionalPageNavigator, GridView, Icon, Image, InlinePaymentPanel, Input, KeyboardAccessory, Label, Lifestyle, Like, ListView, LivePlayer, LivePusher, Login, Lottie, Map2 as Map, MatchMedia, MovableArea, MovableView, NativeSlot, NavigationBar, Navigator, OfficialAccount, OpenData, PageContainer, PageMeta, Picker, PickerGroup, PickerView, PickerViewColumn, Progress, PullToRefresh, Radio, RadioGroup, RichText, RootPortal, RtcRoom, RtcRoomItem, ScrollView, ShareElement, Slider, Slot, Snapshot, StickyHeader, StickySection, Swiper, SwiperItem, Switch, TabItem, Tabbar, Tabs, Text, Textarea, Video, VideoControl, VideoDanmu, View, VoipRoom, WebView };
