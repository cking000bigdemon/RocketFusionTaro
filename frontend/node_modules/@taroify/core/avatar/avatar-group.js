import { View } from "@tarojs/components";
import classNames from "classnames";
import _size from "lodash/size";
import _get from "lodash/get";
import * as React from "react";
import { Children, cloneElement, isValidElement, useMemo, } from "react";
import { prefixClassname } from "../styles/index.js";
import { isElementOf } from "../utils/validate/index.js";
import Avatar from "./avatar.js";
const useAvatars = (children, shape, limit) => {
    return useMemo(() => {
        const avatars = Children.toArray(children)
            .filter((child) => isValidElement(child) && isElementOf(child, Avatar));
        const avatarsSize = _size(avatars);
        const luckyAvatars = [];
        const length = Math.min(avatarsSize, limit);
        const size = avatars[length]
            ? avatars[length].props.size || "medium"
            : "medium";
        for (let index = 0; index < length; index++) {
            const child = _get(avatars, index);
            const element = child;
            const { key, props } = element;
            const { style, children, ...restProps } = props;
            luckyAvatars.push(cloneElement(element, {
                key: key ?? index,
                shape,
                style: {
                    ...style,
                    zIndex: index,
                },
                ...restProps,
            }, children));
        }
        return [luckyAvatars, avatarsSize, size];
    }, [children, limit, shape]);
};
export default function AvatarGroup(props) {
    const { className, shape = "circle", limit = Number.MAX_VALUE, spacing = "small", total, children, } = props;
    const [avatars, avatarsSize, size] = useAvatars(children, shape, limit);
    return (React.createElement(View, { className: classNames(prefixClassname("avatar-group"), {
            [prefixClassname("avatar-group--spacing-mini")]: spacing === "mini",
            [prefixClassname("avatar-group--spacing-small")]: spacing === "small",
            [prefixClassname("avatar-group--spacing-medium")]: spacing === "medium",
            [prefixClassname("avatar-group--spacing-large")]: spacing === "large",
        }, className) },
        avatars,
        avatarsSize >= limit && (React.createElement(Avatar, { shape: shape, size: size, style: { zIndex: avatarsSize } },
            "+",
            total ? total - limit : avatarsSize - limit))));
}
