import { View } from "@tarojs/components";
import classNames from "classnames";
import _isNumber from "lodash/isNumber";
import _toString from "lodash/toString";
import _gt from "lodash/gt";
import * as React from "react";
import { useMemo, cloneElement } from "react";
import { prefixClassname } from "../styles/index.js";
import { isElementOf } from "../utils/validate/index.js";
function Badge(props) {
    const { className, content: contentProp, max, dot: dotProp, position = "top-right", children, ...restProps } = props;
    const hasChildren = children !== undefined;
    const dot = contentProp === true || dotProp;
    const content = useMemo(() => _isNumber(contentProp)
        ? _toString(_gt(contentProp, max) ? `${max}+` : contentProp)
        : contentProp, [contentProp, max]);
    const badge = (React.createElement(View, { className: classNames(prefixClassname("badge__badge"), {
            [prefixClassname("badge--dot")]: dot,
            [prefixClassname("badge--content")]: content,
            [prefixClassname("badge--fixed")]: hasChildren,
            [prefixClassname("badge--top-left")]: position === "top-left",
            [prefixClassname("badge--top-right")]: position === "top-right",
            [prefixClassname("badge--bottom-left")]: position === "bottom-left",
            [prefixClassname("badge--bottom-right")]: position === "bottom-right",
        }, !hasChildren && className), children: !dot && content, ...restProps }));
    if (isElementOf(contentProp, Badge)) {
        return cloneElement(contentProp, {
            className,
            children,
        });
    }
    if (hasChildren) {
        return (React.createElement(View, { className: classNames(prefixClassname("badge-wrapper"), className) },
            children,
            (dot || content) && badge));
    }
    return badge;
}
export default Badge;
