import { useUncontrolled } from "@taroify/hooks/index.js";
import { Success } from "@taroify/icons/index.js";
import { View } from "@tarojs/components";
import classNames from "classnames";
import _size from "lodash/size";
import _toArray from "lodash/toArray";
import * as React from "react";
import { useContext } from "react";
import { prefixClassname } from "../styles/index.js";
import { addUnitPx } from "../utils/format/unit.js";
import CheckboxGroupContext from "./checkbox-group.context.js";
export default function Checkbox(props) {
    const { className, name, defaultChecked, checked: checkedProp, disabled: disabledProp, shape = "round", icon = React.createElement(Success, null), size, children, onChange: onChangeProp, ...restProps } = props;
    const { value: names, max: namesMax = 0, direction, onChange: onNamesChange, disabled: disabledGroup, } = useContext(CheckboxGroupContext);
    const { value: checked, setValue } = useUncontrolled({
        value: checkedProp ?? names?.includes(name),
        defaultValue: defaultChecked,
        onChange: onChangeProp,
    });
    const disabled = disabledProp ?? disabledGroup;
    function onClick() {
        if (disabled) {
            return;
        }
        setValue(!checked);
        if (name) {
            if (names?.includes(name)) {
                onNamesChange?.(names.filter((aName) => aName !== name));
            }
            else if (namesMax === 0 || _size(names) < namesMax) {
                onNamesChange?.([..._toArray(names), name]);
            }
        }
    }
    return (React.createElement(View, { className: classNames(prefixClassname("checkbox"), {
            [prefixClassname("checkbox--horizontal")]: direction === "horizontal",
            [prefixClassname("checkbox--vertical")]: direction === "vertical",
        }, className), onClick: onClick, ...restProps },
        React.createElement(View, { className: classNames(prefixClassname("checkbox__icon"), prefixClassname(`checkbox__icon--${shape}`), {
                [prefixClassname("checkbox__icon--disabled")]: disabled,
                [prefixClassname("checkbox__icon--checked")]: checked,
            }), style: { fontSize: size ? addUnitPx(size) : "" }, children: icon }),
        children && (React.createElement(View, { className: classNames(prefixClassname("checkbox__label"), {
                [prefixClassname("checkbox__label--disabled")]: disabled,
            }), children: children }))));
}
