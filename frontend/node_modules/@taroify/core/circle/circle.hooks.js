import _isNaN from "lodash/isNaN";
import { useEffect, useState } from "react";
import { cancelRaf, raf } from "../utils/raf.js";
import { useToRef } from "../utils/state.js";
export function useAnimatePercent(percentProp, speed) {
    const [percent, setPercent] = useState(percentProp);
    const currentRateRef = useToRef(percent);
    useEffect(() => {
        let rafId;
        const startTime = Date.now();
        const startRate = currentRateRef.current;
        const endRate = percentProp;
        const duration = Math.abs(((startRate - endRate) * 1000) / speed);
        const animate = () => {
            const now = Date.now();
            let progress = (now - startTime) / duration;
            progress = Math.min(_isNaN(progress) ? 1 : progress, 1);
            const rate = progress * (endRate - startRate) + startRate;
            setPercent(rate);
            if (endRate > startRate ? rate < endRate : rate > endRate) {
                rafId = raf(animate);
            }
        };
        if (speed) {
            if (rafId) {
                cancelRaf(rafId);
            }
            rafId = raf(animate);
        }
        else {
            setPercent(endRate);
        }
    }, [currentRateRef, speed, percentProp]);
    return percent;
}
