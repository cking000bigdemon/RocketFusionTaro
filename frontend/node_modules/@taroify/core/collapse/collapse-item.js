import { ArrowRight } from "@taroify/icons/index.js";
import { View } from "@tarojs/components";
import { nextTick } from "@tarojs/taro";
import classNames from "classnames";
import * as React from "react";
import { useCallback, useContext, useEffect, useMemo, useRef, useState, } from "react";
import Cell from "../cell/index.js";
import { prefixClassname } from "../styles/index.js";
import { getRect } from "../utils/dom/rect.js";
import { addUnitPx } from "../utils/format/unit.js";
import { doubleRaf, raf } from "../utils/raf.js";
import CollapseContext from "./collapse.context.js";
function CollapseItem(props) {
    const { className, value, size = "medium", bordered = true, disabled = false, clickable = true, icon, expandIcon = React.createElement(ArrowRight, null), title, brief, extra, children, ...restProps } = props;
    const contentRef = useRef();
    const { isExpanded, toggleItem } = useContext(CollapseContext);
    const expanded = isExpanded?.(value);
    const [visibility, setVisibility] = useState(expanded);
    const [expandHeight, setExpandHeight] = useState("0");
    const onTransitionEnd = useCallback(() => {
        if (!expanded) {
            setVisibility(false);
        }
        else {
            setExpandHeight("");
        }
    }, [expanded]);
    useEffect(() => {
        if (expanded) {
            setVisibility(true);
        }
        const tickRaf = expanded ? nextTick : raf;
        tickRaf(async () => {
            const { height } = await getRect(contentRef);
            if (height) {
                const heightPx = addUnitPx(height);
                setExpandHeight(expanded ? "0" : heightPx);
                doubleRaf(() => {
                    setExpandHeight(expanded ? heightPx : "0");
                });
            }
            else {
                onTransitionEnd();
            }
        });
    }, [expanded, onTransitionEnd]);
    const toggle = useCallback((newExpanded = !expanded) => {
        toggleItem?.(value, newExpanded);
    }, [value, expanded, toggleItem]);
    const onTitleClick = useCallback(() => {
        if (!disabled) {
            toggle();
        }
    }, [disabled, toggle]);
    const wrapperStyle = useMemo(() => ({
        display: visibility ? "" : "none",
        height: expandHeight,
    }), [expandHeight, visibility]);
    return (React.createElement(View, { className: classNames(prefixClassname("collapse-item"), {
            [prefixClassname("collapse-item--bordered")]: value && bordered,
        }, className), ...restProps },
        React.createElement(Cell, { className: classNames(prefixClassname("collapse-item__title"), {
                [prefixClassname("collapse-item__title--disabled")]: disabled,
                [prefixClassname("collapse-item__title--expanded")]: expanded,
                [prefixClassname("collapse-item__title--borderless")]: !bordered,
            }), size: size, icon: icon, rightIcon: expandIcon, title: title, clickable: !disabled && clickable, brief: brief, children: extra, onClick: onTitleClick }),
        React.createElement(View, { className: prefixClassname("collapse-item__wrapper"), style: wrapperStyle, onTransitionEnd: onTransitionEnd },
            React.createElement(View, { ref: contentRef, className: prefixClassname("collapse-item__content"), children: children }))));
}
export default CollapseItem;
