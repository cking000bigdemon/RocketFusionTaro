import { useUncontrolled } from "@taroify/hooks/index.js";
import { View } from "@tarojs/components";
import classNames from "classnames";
import _size from "lodash/size";
import * as React from "react";
import { Children, cloneElement, isValidElement, useCallback, } from "react";
import { prefixClassname } from "../styles/index.js";
import { HAIRLINE_BORDER_TOP_BOTTOM } from "../styles/hairline.js";
import CollapseItem from "./collapse-item.js";
import CollapseContext from "./collapse.context.js";
function validateActiveValue(value, accordion) {
    if (accordion && Array.isArray(value)) {
        console.error('[Taroify] Collapse: "value" should not be Array in accordion mode');
        return false;
    }
    if (!accordion && !Array.isArray(value)) {
        console.error('[Taroify] Collapse: "value" should be Array in non-accordion mode');
        return false;
    }
    return true;
}
function useCollapseChildren(children) {
    const __children__ = {
        items: [],
    };
    Children.forEach(children, (child) => {
        if (isValidElement(child)) {
            const element = child;
            const elementType = element.type;
            if (elementType === CollapseItem) {
                const { key, props } = element;
                const index = _size(__children__.items);
                const { value } = props;
                __children__.items?.push(cloneElement(element, {
                    key: key ?? index,
                    value: value ?? index,
                }));
            }
            else {
                __children__.items?.push(element);
            }
        }
        else {
            __children__.items?.push(child);
        }
    });
    return __children__;
}
function Collapse(props) {
    const { className, bordered, defaultValue, value: valueProp, accordion = false, onChange: onChangeProp, children: childrenProp, ...restProps } = props;
    const { value, setValue } = useUncontrolled({
        value: valueProp,
        defaultValue,
        onChange: onChangeProp,
    });
    const { items } = useCollapseChildren(childrenProp);
    const toggleItem = useCallback((itemValue, expanded) => {
        if (accordion) {
            setValue(itemValue === value ? "" : itemValue);
        }
        else if (expanded) {
            setValue(value.concat(itemValue));
        }
        else {
            setValue(value.filter((activeKey) => activeKey !== itemValue));
        }
    }, [accordion, setValue, value]);
    const isExpanded = useCallback((itemValue) => {
        if (process.env.NODE_ENV !== "production" && !validateActiveValue(value, accordion)) {
            return false;
        }
        return accordion ? value === itemValue : value.includes(itemValue);
    }, [accordion, value]);
    return (React.createElement(CollapseContext.Provider, { value: {
            isExpanded,
            toggleItem,
        } },
        React.createElement(View, { className: classNames(prefixClassname("collapse"), {
                [HAIRLINE_BORDER_TOP_BOTTOM]: bordered,
            }, className), children: items, ...restProps })));
}
export default Collapse;
