import { View } from "@tarojs/components";
import classNames from "classnames";
import _isFunction from "lodash/isFunction";
import * as React from "react";
import { forwardRef, useImperativeHandle, useMemo } from "react";
import { prefixClassname } from "../styles/index.js";
import { parseFormat } from "./countdown.shared.js";
import useCountdown from "./use-countdown.js";
const Countdown = forwardRef((props, ref) => {
    const { className, value = 0, autostart = true, interval, format = "HH:mm:ss", onChange, onComplete, children, ...restProps } = props;
    const { current, pause, reset, restart, start, stop } = useCountdown({
        value,
        autostart,
        interval,
        onChange,
        onComplete,
    });
    useImperativeHandle(ref, () => ({
        pause,
        reset,
        restart,
        start,
        stop,
    }), [pause, reset, restart, start, stop]);
    const childrenRender = useMemo(() => {
        if (_isFunction(children)) {
            return children(current);
        }
        if (children) {
            return children;
        }
        if (_isFunction(format)) {
            return format(current);
        }
        if (format) {
            return parseFormat(format, current);
        }
    }, [children, current, format]);
    return (React.createElement(View, { className: classNames(prefixClassname("countdown"), className), children: childrenRender, ...restProps }));
});
export default Countdown;
