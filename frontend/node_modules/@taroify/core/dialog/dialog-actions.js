import { View } from "@tarojs/components";
import classNames from "classnames";
import * as React from "react";
import { Children, cloneElement, isValidElement, useMemo, } from "react";
import { prefixClassname } from "../styles/index.js";
import { HAIRLINE_BORDER_LEFT, HAIRLINE_BORDER_TOP } from "../styles/hairline.js";
import { getLogger } from "../utils/logger.js";
const { deprecated } = getLogger("Dialog.Actions");
function useActionButtons(props) {
    return useMemo(() => {
        const { children, variant } = props;
        if (children === undefined) {
            return children;
        }
        const __rounded__ = variant === "rounded";
        const count = Children.count(children);
        const zeroIndex = 0;
        const lastIndex = count - 1;
        const __children__ = [];
        Children.forEach(children, (action, index) => {
            if (!isValidElement(action)) {
                __children__.push(action);
                return;
            }
            const element = action;
            const actionClassNames = [element.props.className];
            if (index !== zeroIndex && !__rounded__) {
                actionClassNames.push(HAIRLINE_BORDER_LEFT);
            }
            if (index !== lastIndex) {
                actionClassNames.push(prefixClassname("dialog__cancel"));
            }
            if (index === lastIndex) {
                actionClassNames.push(prefixClassname("dialog__confirm"));
            }
            __children__.push(cloneElement(action, {
                key: action.key ?? index,
                className: classNames(action.props.className, actionClassNames),
                size: "large",
                shape: "square",
                variant: __rounded__ ? "contained" : "text",
            }));
        });
        return __children__;
    }, [props]);
}
export default function DialogActions(props) {
    const { theme, variant: variantProp, children: childrenProp } = props;
    if (theme === "round") {
        deprecated('Use the variant="rounded" prop instead of the theme="round" prop');
    }
    const variant = variantProp ?? (theme === "round" ? "rounded" : undefined);
    const children = useActionButtons({ children: childrenProp, variant });
    return (React.createElement(View, { className: classNames(prefixClassname("dialog__footer"), {
            [HAIRLINE_BORDER_TOP]: variant !== "rounded",
            [prefixClassname("dialog__footer--rounded")]: variant === "rounded",
        }), children: children }));
}
