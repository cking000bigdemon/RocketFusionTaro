import _assign from "lodash/assign";
import _isPlainObject from "lodash/isPlainObject";
import { createElement, isValidElement } from "react";
import { document } from "@tarojs/runtime";
import { mountPortal, unmountPortal, getPagePath } from "../utils/dom/portal.js";
import { dialogEvents, dialogSelectorSet } from "./dialog.shared.js";
import Dialog from "./dialog.js";
const initialDialogOptions = {
    className: undefined,
    style: undefined,
    backdrop: undefined,
    message: undefined,
    title: undefined,
    messageAlign: undefined,
    confirm: undefined,
    cancel: undefined,
};
const DEFAULT_DIALOG_SELECTOR = "#dialog";
const defaultDialogOptions = {};
const dialogViewMap = new Map();
resetDefaultDialogOptions();
export function setDefaultDialogOptions(options) {
    _assign(defaultDialogOptions, options);
}
export function resetDefaultDialogOptions() {
    _assign(defaultDialogOptions, {
        selector: DEFAULT_DIALOG_SELECTOR,
    });
}
function parseDialogOptions(message) {
    const options = !isValidElement(message) && _isPlainObject(message) ? message : { message };
    return _assign({}, initialDialogOptions, defaultDialogOptions, options);
}
function generateDialogId(selector = DEFAULT_DIALOG_SELECTOR) {
    return `${getPagePath()}__${selector}__${Date.now()}`;
}
export function openDialog(args) {
    const { selector = "#dialog", ...restOptions } = parseDialogOptions(args);
    const pageSelector = `${getPagePath()}__${selector}`;
    if (selector && dialogSelectorSet.has(pageSelector)) {
        dialogEvents.trigger("open", {
            selector,
            ...restOptions,
        });
    }
    else {
        const dialogId = generateDialogId(selector);
        const dialogView = document.createElement("view");
        const onTransitionExited = restOptions.onTransitionExited;
        const unmountFn = () => {
            unmountPortal(dialogView);
            dialogViewMap.delete(dialogId);
        };
        restOptions.onTransitionExited = () => {
            onTransitionExited?.();
            unmountFn();
        };
        mountPortal(createElement(Dialog, {
            ...restOptions,
            defaultOpen: true,
            id: dialogId,
        }), dialogView);
        dialogViewMap.set(dialogId, { view: dialogView, unmountFn });
        return dialogId;
    }
}
export function confirmDialog(args) {
    const { cancel = "取消", confirm = "确定", ...restOptions } = parseDialogOptions(args);
    return openDialog({
        confirm,
        cancel,
        ...restOptions,
    });
}
export function alertDialog(args) {
    const { confirm = "确定", ...restOptions } = parseDialogOptions(args);
    return openDialog({
        confirm,
        ...restOptions,
    });
}
export function cancelDialog(selector) {
    dialogEvents.trigger("cancel", selector ?? defaultDialogOptions.selector);
}
