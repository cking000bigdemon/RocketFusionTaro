import { useUncontrolled } from "@taroify/hooks/index.js";
import { ScrollView, View } from "@tarojs/components";
import classnames from "classnames";
import _isArray from "lodash/isArray";
import _isBoolean from "lodash/isBoolean";
import * as React from "react";
import { useCallback, useContext, useMemo, useState, } from "react";
import Popup from "../popup/index.js";
import { prefixClassname } from "../styles/index.js";
import { addUnitPx } from "../utils/format/unit.js";
import DropdownMenuItemContext from "./dropdown-menu-item.context.js";
import DropdownMenuContext from "./dropdown-menu.context.js";
import DropdownMenuOption from "./dropdown-menu-option.js";
function DropdownMenuItem(props) {
    const { style: styleProp, __dataKey__: dataKey, defaultValue, value: valueProp, disabled, lock = false, children: childProp, options, onOpen, onClose, onOpened, onClosed, onChange: onChangeProp, onTransitionExited, ...restProps } = props;
    const { getValue, setValue } = useUncontrolled({
        value: valueProp,
        defaultValue,
        onChange: onChangeProp,
    });
    const children = useMemo(() => {
        return childProp
            ? childProp
            : (options || []).map((option, idx) => (React.createElement(DropdownMenuOption, { key: option.value || idx, ...option })));
    }, [childProp, options]);
    const { direction = "down", itemOffset, backdropType = "inner", isItemToggle, toggleItem: triggerItem, } = useContext(DropdownMenuContext);
    const active = useMemo(() => isItemToggle?.(dataKey), [dataKey, isItemToggle]);
    const [opened, setOpened] = useState(false);
    const down = direction === "down";
    const toggleItem = useCallback(() => {
        if (!disabled) {
            triggerItem?.(dataKey);
        }
    }, [dataKey, disabled, triggerItem]);
    const isOptionToggle = useCallback((aValue) => _isArray(getValue()) ? getValue().includes(aValue) : getValue() === aValue, [getValue]);
    const toggleOption = useCallback(({ value: evtValue, active }) => {
        const value = getValue();
        const multiselect = _isArray(value);
        if (multiselect) {
            if (active) {
                setValue(value.concat(evtValue));
            }
            else {
                setValue(value.filter((aValue) => aValue !== evtValue));
            }
        }
        else {
            setValue(value === evtValue && !active ? undefined : evtValue);
        }
        toggleItem();
    }, [getValue, setValue, toggleItem]);
    const rootStyle = useMemo(() => {
        const style = {};
        if (opened) {
            if (down) {
                style.top = itemOffset ? addUnitPx(itemOffset) : "";
            }
            else {
                style.bottom = itemOffset ? addUnitPx(itemOffset) : "";
            }
        }
        style.display = !active && !opened ? "none" : "";
        return style;
    }, [opened, active, down, itemOffset]);
    return (React.createElement(DropdownMenuItemContext.Provider, { value: {
            toggleOption,
            isOptionToggle,
        } },
        React.createElement(View, { style: {
                ...styleProp,
                ...rootStyle,
            }, className: classnames(prefixClassname("dropdown-menu-item"), prefixClassname(`dropdown-menu-item--${direction}`)), ...restProps },
            React.createElement(Popup, { open: _isBoolean(active) && active, className: prefixClassname("dropdown-menu-item__content"), placement: down ? "top" : "bottom", lock: lock, onTransitionEnter: () => {
                    setOpened(true);
                    onOpen?.();
                }, onTransitionEntered: () => {
                    onOpened?.();
                }, onTransitionExit: () => {
                    onClose?.();
                }, onTransitionExited: (...args) => {
                    setOpened(false);
                    onTransitionExited?.(...args);
                    onClosed?.();
                } },
                React.createElement(Popup.Backdrop, { lock: lock, style: { position: backdropType === "inner" ? "absolute" : "fixed" }, onClick: toggleItem }),
                lock ? (React.createElement(ScrollView, { className: prefixClassname("dropdown-menu-item__content--scroll"), scrollY: true }, children)) : (children)))));
}
export default DropdownMenuItem;
