import { useUncontrolled } from "@taroify/hooks/index.js";
import { View } from "@tarojs/components";
import { getWindowInfo, usePageScroll } from "@tarojs/taro";
import classnames from "classnames";
import _size from "lodash/size";
import _isNull from "lodash/isNull";
import _isNumber from "lodash/isNumber";
import _isString from "lodash/isString";
import * as React from "react";
import { Children, cloneElement, isValidElement, useCallback, useEffect, useMemo, useRef, useState, } from "react";
import { useMounted } from "../hooks/index.js";
import { prefixClassname } from "../styles/index.js";
import { getRect } from "../utils/dom/rect.js";
import DropdownMenuItem from "./dropdown-menu-item.js";
import DropdownMenuOption from "./dropdown-menu-option.js";
import DropdownMenuTitle from "./dropdown-menu-title.js";
import DropdownMenuContext from "./dropdown-menu.context.js";
function getDropdownMenuTitle(children, options, dropdownValue) {
    const firstRef = {
        current: undefined,
    };
    const nodeRef = {
        current: undefined,
    };
    Children.forEach(children, (child, index) => {
        if (!isValidElement(child)) {
            return;
        }
        const element = child;
        const elementType = element.type;
        if (elementType === DropdownMenuOption) {
            const { props } = element;
            const { title, value, children } = props;
            if (index === 0) {
                firstRef.current = title ?? children;
            }
            if (dropdownValue === value) {
                nodeRef.current = title ?? children;
            }
        }
    });
    if (!nodeRef.current) {
        if (options) {
            nodeRef.current =
                options.find((option) => option.value === dropdownValue)?.title || options[0].title;
        }
        else {
            nodeRef.current = firstRef.current;
        }
    }
    return nodeRef.current;
}
function useDropdownMenuChildren(children) {
    return useMemo(() => {
        const __children__ = {
            titles: [],
            items: [],
        };
        Children.forEach(children, (child) => {
            if (!isValidElement(child)) {
                return;
            }
            const element = child;
            const elementType = element.type;
            if (elementType === DropdownMenuItem) {
                const { key, props } = element;
                const { disabled, title, value, children: itemChildren, options, } = props;
                const index = _size(__children__.items);
                const itemKey = key ?? index;
                __children__.items.push(cloneElement(element, {
                    key: itemKey,
                    __dataKey__: itemKey,
                }));
                __children__.titles.push(React.createElement(DropdownMenuTitle, { key: itemKey, __dataKey__: itemKey, disabled: disabled, children: title ?? getDropdownMenuTitle(itemChildren, options, value) }));
            }
        });
        return __children__;
    }, [children]);
}
function DropdownMenu(props) {
    const { className, defaultValue, value: valueProp, direction = "down", backdropType = "inner", children: childrenProp, onChange: onChangeProp, ...restProps } = props;
    const { value, setValue } = useUncontrolled({
        value: valueProp,
        onChange: onChangeProp,
    });
    const barRef = useRef();
    const [opened, setOpened] = useState();
    const [itemOffset, setItemOffset] = useState(0);
    const { titles, items } = useDropdownMenuChildren(childrenProp);
    const toggleKeyRef = useRef();
    const windowHeight = useMemo(() => getWindowInfo().windowHeight, []);
    const updateItemOffset = useCallback(() => {
        getRect(barRef).then((rect) => {
            if (rect) {
                if (direction === "down") {
                    setItemOffset(rect.bottom);
                }
                else {
                    setItemOffset(windowHeight - rect.top);
                }
            }
        });
    }, [direction, windowHeight]);
    const toggleItem = useCallback((itemKey) => {
        const itemActive = value === itemKey ? null : itemKey;
        if (itemActive !== null) {
            updateItemOffset();
        }
        setValue(itemActive);
    }, [setValue, updateItemOffset, value]);
    const isItemToggle = useCallback((itemKey) => {
        const active = toggleKeyRef.current === itemKey;
        if (active && _isNull(value)) {
            return null;
        }
        return value === itemKey;
    }, [value]);
    useEffect(() => {
        const val = value !== false && value !== null && value !== undefined;
        if (val) {
            setOpened(val);
        }
        else {
            setTimeout(() => {
                setOpened(val);
            }, 300);
        }
    }, [value]);
    usePageScroll(updateItemOffset);
    useMounted(() => {
        if (_isNumber(defaultValue) || _isString(defaultValue)) {
            toggleItem(defaultValue);
            setTimeout(updateItemOffset, 120);
        }
    });
    return (React.createElement(DropdownMenuContext.Provider, { value: {
            direction,
            itemOffset,
            backdropType,
            toggleItem,
            isItemToggle,
        } },
        React.createElement(View, { className: classnames(prefixClassname("dropdown-menu"), className), ...restProps },
            React.createElement(View, { ref: barRef, className: classnames(prefixClassname("dropdown-menu__bar"), {
                    [prefixClassname("dropdown-menu__bar--opened")]: opened,
                }), children: titles }),
            items)));
}
export default DropdownMenu;
