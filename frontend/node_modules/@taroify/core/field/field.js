import * as React from "react";
import { useRef, useImperativeHandle, forwardRef, } from "react";
import Form from "../form/index.js";
import { createVariantElement } from "../utils/element.js";
function _Field(props, ref) {
    const { label: labelProp, feedback: feedbackProp, children, ...restProps } = props;
    const label = createVariantElement(Form.Label, labelProp);
    const feedback = createVariantElement(Form.Feedback, feedbackProp);
    const formItemRef = useRef();
    useImperativeHandle(ref, () => formItemRef.current, [formItemRef]);
    if ("noStyle" in restProps || "shouldUpdate" in restProps) {
        console.warn("[Taroify] Field: not support noStyle & shouldUpdate property");
    }
    return (React.createElement(Form.Item, { ...restProps, ref: formItemRef },
        label,
        children && React.createElement(Form.Control, { children: children }),
        feedback));
}
const Field = forwardRef(_Field);
export default Field;
