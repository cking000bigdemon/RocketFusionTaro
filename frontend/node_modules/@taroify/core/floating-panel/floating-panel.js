import * as React from "react";
import { forwardRef, useMemo, useState, useRef, useEffect, useImperativeHandle } from "react";
import { getWindowInfo, getEnv } from "@tarojs/taro";
import { View, ScrollView } from "@tarojs/components";
import classNames from "classnames";
import SafeArea from "../safe-area/index.js";
import { prefixClassname } from "../styles/index.js";
import { useTouch } from "../utils/touch.js";
import { addUnitPx } from "../utils/format/unit.js";
import { preventDefault } from "../utils/dom/event.js";
import { closest } from "../utils/closest.js";
const DAMP = 0.2;
const FloatingPanel = forwardRef((props, ref) => {
    const { className, style: styleProp, anchors: anchorsProp = [], height: heightProp = 0, duration = 0.3, contentDraggable = true, safeAreaInsetBottom = true, children, handleChange, } = props;
    const contentRef = useRef();
    const headerRef = useRef();
    const startY = useRef(0);
    const [height, setHeight] = useState(heightProp);
    const [dragging, setDragging] = useState(false);
    const [scrollContentTop, setScrollContentTop] = useState(0);
    const touch = useTouch();
    const windowHeight = useMemo(() => getWindowInfo().windowHeight, []);
    useImperativeHandle(ref, () => ({ setHeight }));
    const ease = (moveY) => {
        const absDistance = Math.abs(moveY);
        const { min, max } = boundary;
        if (absDistance > max) {
            return -(max + (absDistance - max) * DAMP);
        }
        if (absDistance < min) {
            return -(min - (min - absDistance) * DAMP);
        }
        return moveY;
    };
    const boundary = useMemo(() => ({
        min: anchorsProp[0] ?? 100,
        max: anchorsProp[anchorsProp.length - 1] ?? Math.round(windowHeight * 0.6),
    }), [anchorsProp, windowHeight]);
    const anchors = useMemo(() => (anchorsProp.length >= 2 ? anchorsProp : [boundary.min, boundary.max]), [anchorsProp, boundary.min, boundary.max]);
    useEffect(() => {
        setHeight(closest(anchors, height));
    }, [boundary.max, boundary.min]);
    const rootStyle = useMemo(() => ({
        height: addUnitPx(boundary.max),
        transform: `translateY(calc(100% + ${addUnitPx(-height)}))`,
        transition: !dragging
            ? `transform ${duration}s cubic-bezier(0.18, 0.89, 0.32, 1.28)`
            : "none",
    }), [boundary.max, height, dragging, duration]);
    const onTouchStart = (event) => {
        touch.start(event);
        setDragging(true);
        startY.current = -height;
    };
    const onTouchMove = async (event) => {
        touch.move(event);
        const target = event.target;
        let isHeader = false;
        if (getEnv() === "WEB") {
            isHeader = target.dataset.id === "floating-panel__header";
        }
        else {
            isHeader = target.dataset.id === "floating-panel__header";
        }
        if (!isHeader) {
            if (!contentDraggable)
                return;
            let scrollTop = 0;
            if (getEnv() === "WEB") {
                scrollTop = contentRef.current.scrollTop;
            }
            else {
                scrollTop = scrollContentTop;
            }
            if (-startY.current < boundary.max) {
                preventDefault(event, true);
            }
            else if (!(scrollTop <= 0 && touch.deltaY > 0)) {
                return;
            }
        }
        const moveY = touch.deltaY + startY.current;
        setHeight(-ease(moveY));
    };
    const onTouchEnd = () => {
        setDragging(false);
        setHeight(closest(anchors, height));
        if (height !== -startY.current) {
            handleChange?.(height);
        }
    };
    const onContentScroll = (e) => {
        setScrollContentTop(e.detail.scrollTop);
    };
    return (React.createElement(View, { ref: ref, className: classNames(prefixClassname("floating-panel"), className), style: {
            ...rootStyle,
            ...styleProp,
        }, onTouchStart: onTouchStart, onTouchMove: onTouchMove, onTouchEnd: onTouchEnd, onTouchCancel: onTouchEnd },
        React.createElement(View, { className: classNames(prefixClassname("floating-panel__header")), ref: headerRef, "data-id": "floating-panel__header" },
            React.createElement(View, { className: classNames(prefixClassname("floating-panel__header-bar")) })),
        getEnv() === "WEB" ? (React.createElement(View, { className: classNames(prefixClassname("floating-panel__content")), ref: contentRef },
            children,
            safeAreaInsetBottom && React.createElement(SafeArea, { position: "bottom" }))) : (React.createElement(ScrollView, { scrollY: true, className: classNames(prefixClassname("floating-panel__content")), ref: contentRef, onScroll: onContentScroll },
            children,
            safeAreaInsetBottom && React.createElement(SafeArea, { position: "bottom" })))));
});
export default FloatingPanel;
