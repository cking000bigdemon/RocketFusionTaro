import { Input as TaroInput, Switch as TaroSwitch, Textarea as TaroTextarea, } from "@tarojs/components";
import { cloneElement } from "react";
import Checkbox from "../../checkbox/index.js";
import Input from "../../input/index.js";
import Radio from "../../radio/index.js";
import Rate from "../../rate/index.js";
import Slider from "../../slider/index.js";
import Stepper from "../../stepper/index.js";
import Switch from "../../switch/index.js";
import Textarea from "../../textarea/index.js";
import Uploader from "../../uploader/index.js";
import { registerFormControlHandler } from "./form-control-handler.js";
registerFormControlHandler(new (class {
    doControlRender(element, controller) {
        const { name, value, validateStatus, disabled: disabledProp, onBlur: onDelegatingBlur, onChange: onDelegatingChange, } = controller;
        const { props: elementProps } = element;
        const { name: nameProp, value: valueProp, color, onBlur, onInput, disabled } = elementProps;
        return cloneElement(element, {
            name: nameProp ?? name,
            value: valueProp ?? value,
            color: color ?? (validateStatus === "invalid" ? "danger" : undefined),
            disabled: disabled ?? disabledProp,
            onInput: (e) => {
                onInput?.(e);
                onDelegatingChange?.(e.detail.value);
            },
            onBlur: (e) => {
                onBlur?.(e);
                onDelegatingBlur?.(e.detail.value);
            },
        });
    }
    supportsControlType(elementType) {
        return (elementType === TaroInput ||
            elementType === TaroTextarea ||
            elementType === Input ||
            elementType === Textarea);
    }
})());
registerFormControlHandler(new (class {
    doControlRender(element, controller) {
        const { name, value, onChange: onDelegatingChange, disabled: disabledProp } = controller;
        const { props: elementProps } = element;
        const { name: nameProp, checked: checkedProp, onChange, disabled } = elementProps;
        return cloneElement(element, {
            name: nameProp ?? name,
            checked: checkedProp ?? value,
            disabled: disabled ?? disabledProp,
            onChange: (e) => {
                onChange?.(e);
                onDelegatingChange?.(e.detail.value);
            },
        });
    }
    supportsControlType(elementType) {
        return elementType === TaroSwitch;
    }
})());
registerFormControlHandler(new (class {
    doControlRender(element, controller) {
        const { value, onChange: onDelegatingChange, disabled: disabledProp } = controller;
        const { props: elementProps } = element;
        const { checked: checkedProp, onChange, disabled } = elementProps;
        return cloneElement(element, {
            checked: checkedProp ?? value,
            disabled: disabled ?? disabledProp,
            onChange: (checked) => {
                onChange?.(checked);
                onDelegatingChange?.(checked);
            },
        });
    }
    supportsControlType(elementType) {
        return elementType === Checkbox || elementType === Switch;
    }
})());
registerFormControlHandler(new (class {
    doControlRender(element, controller) {
        const { value, onChange: onDelegatingChange, disabled: disabledProp } = controller;
        const { props: elementProps } = element;
        const { value: valueProp, onChange, disabled } = elementProps;
        return cloneElement(element, {
            value: valueProp ?? value,
            disabled: disabled ?? disabledProp,
            onChange: (nextValue) => {
                onChange?.(nextValue);
                onDelegatingChange?.(nextValue);
            },
        });
    }
    supportsControlType(elementType) {
        return (elementType === Checkbox.Group ||
            elementType === Radio.Group ||
            elementType === Rate ||
            elementType === Slider ||
            elementType === Stepper ||
            elementType === Uploader);
    }
})());
