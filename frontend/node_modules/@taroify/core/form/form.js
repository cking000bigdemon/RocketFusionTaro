import { useForceUpdate } from "@taroify/hooks/index.js";
import { Form as TaroForm } from "@tarojs/components";
import * as React from "react";
import { forwardRef, useCallback, useEffect, useImperativeHandle, } from "react";
import { nextTick } from "@tarojs/taro";
import { useUniqueId } from "../hooks/index.js";
import { preventDefault } from "../utils/dom/event.js";
import FormContext from "./form.context.js";
import useForm from "./use-form.js";
const Form = forwardRef((props, ref) => {
    const { name: nameProp, defaultValues, values, labelAlign, controlAlign, validateTrigger = "onBlur", colon, disabled, children: childrenProp, onValidate, onValuesChange, onSubmit, onReset, ...restProps } = props;
    const forceUpdate = useForceUpdate();
    const nameId = useUniqueId();
    const name = nameProp ?? nameId;
    const { getErrors, setErrors, setValues, getValues, validate, reset, setFieldsValue, getFieldsValue, validateFields, addEventListener, removeEventListener, } = useForm(name, {
        defaultValues,
        values,
    });
    const delegatingReset = useCallback((e) => {
        nextTick(() => {
            reset();
            onReset?.(e);
        });
    }, [onReset, reset]);
    const handleSubmit = useCallback((e) => {
        validate()
            .then((values) => {
            const event = Object.assign({}, e, {
                detail: {
                    ...e.detail,
                    value: values,
                },
            });
            onSubmit?.(event);
        })
            .catch((errors) => onValidate?.(errors));
    }, [onSubmit, onValidate, validate]);
    const handleReset = useCallback((e) => {
        preventDefault(e);
        delegatingReset(e);
    }, [delegatingReset]);
    useImperativeHandle(ref, () => ({
        submit: () => handleSubmit({}),
        getErrors,
        setErrors,
        getValues,
        setValues,
        validate,
        reset: () => delegatingReset(),
        setFieldsValue,
        getFieldsValue,
        validateFields,
    }), [
        handleSubmit,
        delegatingReset,
        getErrors,
        getFieldsValue,
        getValues,
        setErrors,
        setFieldsValue,
        setValues,
        validate,
        validateFields,
    ]);
    useEffect(() => {
        if (onValuesChange) {
            addEventListener("change", onValuesChange);
        }
        return () => {
            if (onValuesChange) {
                removeEventListener("change", onValuesChange);
            }
        };
    }, [addEventListener, onValuesChange, removeEventListener]);
    useEffect(() => {
        addEventListener("reset", forceUpdate);
        return () => removeEventListener("reset", forceUpdate);
    }, [addEventListener, forceUpdate, onValuesChange, removeEventListener]);
    return (React.createElement(FormContext.Provider, { value: {
            name,
            colon,
            disabled,
            labelAlign,
            controlAlign,
            validateTrigger,
        } },
        React.createElement(TaroForm, { onSubmit: handleSubmit, onReset: handleReset, children: childrenProp, ...restProps })));
});
export default Form;
