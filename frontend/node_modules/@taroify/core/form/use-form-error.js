import { useForceUpdate } from "@taroify/hooks/index.js";
import _first from "lodash/first";
import _isEmpty from "lodash/isEmpty";
import { useCallback, useContext, useEffect, useMemo } from "react";
import { useRendered } from "../utils/state.js";
import FormContext from "./form.context.js";
import useForm from "./use-form.js";
export default function useFormError(name) {
    const { name: formName } = useContext(FormContext);
    const form = useForm(formName);
    const forceUpdate = useForceUpdate();
    const onErrorChange = useCallback(() => forceUpdate(), [forceUpdate]);
    useEffect(() => {
        form?.addEventListener(`fields.${name}.error.change`, onErrorChange);
        return () => form?.removeEventListener(`fields.${name}.error.change`, onErrorChange);
    }, [form, name, onErrorChange]);
    const getError = useCallback(() => {
        if (name)
            return _first(form?.getErrors(name));
    }, [form, name]);
    const setError = useCallback((error) => {
        if (name) {
            form?.setErrors([
                {
                    ...error,
                    name,
                },
            ]);
        }
    }, [form, name]);
    const resetError = useCallback(() => setError({ errors: [] }), [setError]);
    const validateStatus = useRendered(() => _isEmpty(getError()?.errors) ? "valid" : "invalid");
    return useMemo(() => ({
        validateStatus,
        get error() {
            return getError();
        },
        getError,
        setError,
        resetError,
    }), [getError, resetError, setError, validateStatus]);
}
