import { useContext, useEffect, useState } from "react";
import isFunction from "lodash/isFunction";
import { useDeepCompareEffect, useMemoizedFn } from "../hooks/index.js";
import FormContext from "./form.context.js";
import useForm from "./use-form.js";
export function useDependenciesChange(dependencies, validate) {
    const { name: formName } = useContext(FormContext);
    const form = useForm(formName);
    const validateMemo = useMemoizedFn(() => validate());
    useDeepCompareEffect(() => {
        const validFields = dependencies || [];
        validFields.forEach((dep) => {
            form?.addEventListener(`fields.${dep}.value.change`, validateMemo);
        });
        return () => {
            validFields.forEach((dep) => {
                form?.removeEventListener(`fields.${dep}.value.change`, validateMemo);
            });
        };
    }, [dependencies, validateMemo]);
}
export function useShouldUpdateSignal(shouldUpdate) {
    const { name: formName } = useContext(FormContext);
    const form = useForm(formName);
    const [signal, setSignal] = useState(0);
    const shouldUpdateMemo = useMemoizedFn((oldVal, newVal) => {
        if (isFunction(shouldUpdate) ? shouldUpdate(oldVal, newVal) : shouldUpdate) {
            setSignal((prev) => prev + 1);
        }
    });
    useEffect(() => {
        form?.addEventListener("shouldUpdate", shouldUpdateMemo);
        return () => form?.removeEventListener("shouldUpdate", shouldUpdateMemo);
    }, [form, shouldUpdateMemo]);
    return signal;
}
