import { useState, useMemo, useContext, useEffect } from "react";
import map from "lodash/map";
import filter from "lodash/filter";
import cloneDeep from "lodash/cloneDeep";
import { useMemoizedFn } from "../hooks/index.js";
import FormContext from "./form.context.js";
import useForm from "./use-form.js";
import useFormField from "./use-form-field.js";
import useFormValue from "./use-form-value.js";
let fieldKey = 0;
export default function useFormList(field, options) {
    const { defaultValue } = options ?? {};
    const { name: formName } = useContext(FormContext);
    const form = useForm(formName);
    const [fields, setFields] = useState([]);
    const valueChangeHandler = useMemoizedFn((values) => {
        if ((values || []).length !== fields.length) {
            setFields(map(values, (_, i) => ({ name: `${field}.${i}`, key: ++fieldKey })));
        }
        const formAttributes = form?.getAttributiveForm();
        if (formAttributes?.errors?.[field]) {
            formAttributes.errors = {
                ...formAttributes.errors,
                [field]: [],
            };
        }
    });
    const resetHandler = useMemoizedFn(() => {
        setFields(map(getValue(), (_, i) => ({ name: `${field}.${i}`, key: ++fieldKey })));
    });
    useEffect(() => {
        form?.addEventListener("reset", resetHandler);
        return () => form?.removeEventListener("reset", resetHandler);
    }, [form]);
    const { getValue, setValue } = useFormValue(field, { defaultValue, valueChangeHandler });
    const instance = useMemo(() => ({
        name: field,
        validate: () => Promise.resolve(),
        getValue,
        setValue,
    }), [getValue, field, setValue]);
    useFormField(field, instance);
    const add = useMemoizedFn((value) => {
        setFields(fields.concat([{ name: `${field}.${fields.length}`, key: ++fieldKey }]));
        form?.setValues({ [`${field}.${fields.length}`]: value });
    });
    const remove = useMemoizedFn((index) => {
        const values = form?.getValues(field)?.[field] || [];
        form?.setValues({
            [field]: filter(values.slice(), (_, i) => i !== index),
        }, false);
        const formAttributes = form?.getAttributiveForm();
        if (formAttributes?.errors?.[field]) {
            const errors = formAttributes.errors[field];
            const newErrors = cloneDeep(filter(errors.slice(), (_, i) => i !== index));
            for (let i = 0; i < newErrors.length; i++) {
                if (newErrors[i]) {
                    const keys = Object.keys(newErrors[i]);
                    if (keys.includes("name") && typeof newErrors[i]["name"] === "string") {
                        newErrors[i]["name"] = `${field}.${i}`;
                    }
                    else {
                        keys.forEach((key) => {
                            newErrors[i][key]["name"] = `${field}.${i}.${key}`;
                        });
                    }
                }
            }
            formAttributes.errors = {
                ...formAttributes.errors,
                [field]: newErrors,
            };
        }
        setFields(filter(fields, (_, i) => i !== index).map((item, i) => ({
            name: `${field}.${i}`,
            key: item.key,
        })));
    });
    const operation = useMemo(() => ({ add, remove }), []);
    return [fields, operation];
}
