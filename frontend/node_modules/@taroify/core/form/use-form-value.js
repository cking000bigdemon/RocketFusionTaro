import { useForceUpdate } from "@taroify/hooks/index.js";
import _get from "lodash/get";
import { useCallback, useContext, useEffect, useMemo } from "react";
import { useMemoizedFn } from "../hooks/index.js";
import FormContext from "./form.context.js";
import useForm from "./use-form.js";
import formListContext from "./form-list.context.js";
export default function useFormValue(name, options) {
    const { defaultValue, valueChangeHandler } = options ?? {};
    const { name: formName } = useContext(FormContext);
    const { inFormList } = useContext(formListContext);
    const form = useForm(formName);
    const forceUpdate = useForceUpdate();
    const onValueChange = useMemoizedFn((values) => {
        valueChangeHandler?.(values);
        forceUpdate();
    });
    useEffect(() => {
        form?.addEventListener(`fields.${name}.value.change`, onValueChange);
        return () => form?.removeEventListener(`fields.${name}.value.change`, onValueChange);
    }, [form, name, onValueChange]);
    useEffect(() => {
        if (name && defaultValue) {
            form?.setDefaultValues({
                [name]: defaultValue,
            }, inFormList);
        }
    }, []);
    const getValue = useCallback(() => {
        if (form) {
            return _get(form.getValues(name), name) ?? "";
        }
    }, [form, name]);
    return useMemo(() => ({
        get value() {
            return getValue();
        },
        setValue: (value) => {
            if (name) {
                form?.setValues({ [name]: value });
            }
        },
        getValue,
    }), [form, getValue, name]);
}
