import { View } from "@tarojs/components";
import classNames from "classnames";
import * as React from "react";
import { useContext, useMemo, cloneElement, isValidElement, } from "react";
import { prefixClassname } from "../styles/index.js";
import { HAIRLINE_BORDER } from "../styles/hairline.js";
import { addUnitPx } from "../utils/format/unit.js";
import Badge from "../badge/index.js";
import GridContext from "./grid.context.js";
function useGridItemPercent(columns) {
    return useMemo(() => `${100 / columns}%`, [columns]);
}
export function GridItem(props) {
    const { __dataIndex__ = 0, className, style: styleProp, icon: iconProp, text, dot, badge, children, ...restProps } = props;
    const { columns, gutter, bordered, centered, clickable, direction, square, } = useContext(GridContext);
    const percent = useGridItemPercent(columns);
    const rootStyle = useMemo(() => {
        const style = {
            ...styleProp,
        };
        style.flexBasis = `${percent}`;
        if (square) {
            style.paddingTop = percent;
        }
        else if (gutter) {
            const gutterValue = addUnitPx(gutter);
            style.paddingRight = gutterValue;
            if (__dataIndex__ >= columns) {
                style.marginTop = gutterValue;
            }
        }
        return style;
    }, [styleProp, percent, square, gutter, __dataIndex__, columns]);
    const contentStyle = useMemo(() => {
        if (square && gutter) {
            const gutterValue = addUnitPx(gutter);
            return {
                right: gutterValue,
                bottom: gutterValue,
                height: "auto",
            };
        }
    }, [square, gutter]);
    const icon = isValidElement(iconProp)
        ? cloneElement(iconProp, { className: prefixClassname("grid-item__icon") })
        : iconProp;
    return (React.createElement(View, { className: classNames(prefixClassname("grid-item"), {
            [prefixClassname("grid-item--square")]: square,
        }, className), style: rootStyle, ...restProps },
        React.createElement(View, { style: contentStyle, className: classNames(prefixClassname("grid-item__content"), {
                [prefixClassname("grid-item__content--square")]: square,
                [prefixClassname("grid-item__content--centered")]: centered,
                [prefixClassname("grid-item__content--clickable")]: clickable,
                [prefixClassname("grid-item__content--horizontal")]: direction === "horizontal",
                [prefixClassname("grid-item__content--surround")]: bordered && gutter,
                [HAIRLINE_BORDER]: bordered,
            }) }, children === undefined ? (React.createElement(React.Fragment, null,
            badge ? (React.createElement(Badge, { className: prefixClassname("grid-item__icon-wrapper"), content: badge, dot: dot, children: icon })) : (icon),
            React.createElement(View, { className: prefixClassname("grid-item__text") }, text))) : (children))));
}
export default GridItem;
