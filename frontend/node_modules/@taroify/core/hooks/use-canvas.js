import { useEffect, useState, useMemo } from "react";
import { getEnv, nextTick, createSelectorQuery, getWindowInfo } from "@tarojs/taro";
import { getRect } from "../utils/dom/rect.js";
import useMemoizedFn from "./use-memoized-fn.js";
function useCanvas(canvasId, canvasRef, options = {}) {
    const [loaded, setLoaded] = useState(false);
    const [canvas, setCanvas] = useState(null);
    const [ctx, setCtx] = useState(null);
    const ratio = useMemo(() => getWindowInfo().pixelRatio || 1, []);
    const { onLoaded: onLoadedProp } = options;
    const onLoaded = useMemoizedFn((a, b) => onLoadedProp?.(a, b));
    useEffect(() => {
        const env = getEnv();
        let retry = 0;
        const setData = async (_canvas) => {
            if (_canvas) {
                const canvasRectRef = await getRect(canvasRef);
                _canvas.width = Math.floor((canvasRectRef.width || _canvas.width) * ratio);
                _canvas.height = Math.floor((canvasRectRef.height || _canvas.height) * ratio);
            }
            const _ctx = _canvas?.getContext("2d");
            if (_ctx) {
                _ctx.scale(ratio, ratio);
                setCanvas(_canvas);
                setCtx(_ctx);
                setLoaded(true);
                onLoaded(_canvas, _ctx);
            }
            else {
                setTimeout(() => {
                    if (retry++ < 5) {
                        init();
                        console.log("[Taroify] canvas: init again");
                    }
                    else {
                        console.error("[Taroify] canvas: init fail");
                    }
                }, 100 * 2 ** retry);
            }
        };
        const init = () => {
            if (env === "WEB") {
                setData((canvasRef.current?.children || [])[0]);
            }
            else {
                nextTick(() => {
                    createSelectorQuery()
                        .select(`#${canvasId}`)
                        .fields({ node: true })
                        .exec((res) => {
                        setData(res[0]?.node);
                    });
                });
            }
        };
        init();
    }, [canvasId, canvasRef]);
    return [canvas, ctx, loaded];
}
export default useCanvas;
