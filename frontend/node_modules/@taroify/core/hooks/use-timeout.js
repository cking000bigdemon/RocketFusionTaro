import { useCallback, useMemo, useRef } from "react";
function useTimeout() {
    const timerRef = useRef();
    const cbRef = useRef();
    const msRef = useRef();
    const argsRef = useRef();
    const stop = useCallback(() => {
        if (timerRef.current) {
            clearTimeout(timerRef.current);
            timerRef.current = undefined;
        }
    }, []);
    const start = useCallback((callback, ms, ...args) => {
        if (timerRef.current) {
            return;
        }
        cbRef.current = callback;
        msRef.current = ms;
        argsRef.current = args;
        timerRef.current = setTimeout(callback, ms, args);
    }, []);
    const restart = useCallback((callback, ms, ...args) => {
        stop();
        if (callback) {
            start(callback, ms, args);
        }
        else if (cbRef.current) {
            start(cbRef.current, msRef.current, argsRef.current);
        }
    }, []);
    return useMemo(() => ({
        restart,
        start,
        stop,
    }), [restart, start, stop]);
}
export default useTimeout;
