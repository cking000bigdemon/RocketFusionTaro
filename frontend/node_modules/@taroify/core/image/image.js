import { Image as TaroImage, View } from "@tarojs/components";
import classNames from "classnames";
import _isBoolean from "lodash/isBoolean";
import * as React from "react";
import { useEffect, useMemo, useState, useRef } from "react";
import { pxTransform } from "@tarojs/taro";
import { prefixClassname } from "../styles/index.js";
import { getLogger } from "../utils/logger.js";
import { useMemoizedFn } from "../hooks/index.js";
import mergeStyle from "../utils/merge-style.js";
import ImagePlaceholder from "./image-placeholder.js";
const { warn } = getLogger("Image");
function useImageMode(mode) {
    return useMemo(() => {
        if (mode === "topLeft") {
            return "top left";
        }
        if (mode === "topRight") {
            return "top right";
        }
        if (mode === "bottomLeft") {
            return "bottom left";
        }
        if (mode === "bottomRight") {
            return "bottom right";
        }
        return mode;
    }, [mode]);
}
function useImageShape(shape, round) {
    let shapeResult = shape;
    if (_isBoolean(round) && round) {
        shapeResult = "circle";
        warn(`Use the shape="${shapeResult}" prop instead of the round prop`);
        if (round) {
            return shapeResult;
        }
    }
    return shapeResult;
}
export default function Image(props) {
    const { className, wrapperClassName, src, alt, width: widthProp, height: heightProp, mode = "scaleToFill", round, shape: shapeProp, lazyLoad = false, placeholder = false, fallback = false, onLoad, onError, style: styleProp, ...restProps } = props;
    const taroImageRef = useRef();
    const taroMode = useImageMode(mode);
    const shape = useImageShape(shapeProp, round);
    const [loading, setLoading] = useState(false);
    const [failed, setFailed] = useState(false);
    const isLoadedRef = useRef(false);
    const [viewStyle, imgStyle] = useMemo(() => {
        const width = widthProp
            ? typeof widthProp === "number"
                ? pxTransform(widthProp)
                : widthProp
            : undefined;
        const height = heightProp
            ? typeof heightProp === "number"
                ? pxTransform(heightProp)
                : heightProp
            : undefined;
        const imgStyle = mergeStyle(styleProp, {});
        imgStyle.width = width || imgStyle.width;
        imgStyle.height = height || imgStyle.height;
        return [
            { width: imgStyle.width || "100%", height: imgStyle.height || "100%", position: "relative" },
            imgStyle,
        ];
    }, [styleProp, widthProp, heightProp]);
    const handleLoad = useMemoizedFn(() => {
        if (!isLoadedRef.current) {
            isLoadedRef.current = true;
            onLoad?.();
            setLoading(false);
        }
    });
    const handleError = useMemoizedFn(() => {
        onError?.();
        setLoading(false);
        setFailed(true);
    });
    useEffect(() => {
        isLoadedRef.current = false;
        const nativeImg = taroImageRef.current?.children?.[0];
        if (nativeImg?.complete) {
            handleLoad();
        }
        else {
            setLoading(true);
        }
    }, [src]);
    return (React.createElement(View, { style: viewStyle, className: wrapperClassName },
        !failed && src && (React.createElement(TaroImage, { ref: taroImageRef, src: src, mode: taroMode, lazyLoad: lazyLoad, className: classNames(prefixClassname("image"), {
                [prefixClassname("image--square")]: shape === "square",
                [prefixClassname("image--rounded")]: shape === "rounded",
                [prefixClassname("image--circle")]: shape === "circle",
                [prefixClassname("image--loading")]: loading,
            }, className), style: imgStyle, imgProps: { alt }, onLoad: handleLoad, onError: handleError, ...restProps })),
        loading && placeholder && React.createElement(ImagePlaceholder, { prefix: "placeholder", children: placeholder }),
        failed && fallback && React.createElement(ImagePlaceholder, { prefix: "fallback", children: fallback })));
}
