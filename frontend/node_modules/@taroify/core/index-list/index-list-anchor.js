import { View } from "@tarojs/components";
import { pageScrollTo } from "@tarojs/taro";
import classNames from "classnames";
import * as React from "react";
import { forwardRef, useCallback, useContext, useImperativeHandle, useRef, } from "react";
import { prefixClassname } from "../styles/index.js";
import { HAIRLINE_BORDER_BOTTOM } from "../styles/hairline.js";
import { getRect } from "../utils/dom/rect.js";
import { addUnitPx } from "../utils/format/unit.js";
import IndexListContext from "./index-list.context.js";
const IndexListAnchor = forwardRef((props, ref) => {
    const { arrayedIndex, index, children, className, ...restProps } = props;
    const { activeArrayedIndex, sticky: stickyProp, stickyOffsetTop, inner, getAnchorRects, getListRect, getFirstAnchorTop, } = useContext(IndexListContext);
    const rootRef = useRef();
    const scrollIntoView = useCallback((scrollTop) => getRect(rootRef).then(({ top }) => pageScrollTo({
        duration: 0,
        scrollTop: Math.ceil(scrollTop + top),
    })), []);
    useImperativeHandle(ref, () => ({
        scrollIntoView,
    }));
    let wrapperStyle = {};
    let anchorStyle = {};
    let active = false;
    if (stickyProp) {
        if (arrayedIndex === activeArrayedIndex) {
            const { top, height } = getAnchorRects()[arrayedIndex];
            const activeAnchorSticky = top - getFirstAnchorTop() <= 0;
            if (activeAnchorSticky) {
                wrapperStyle = {
                    height: addUnitPx(height),
                };
                anchorStyle = {
                    position: inner ? "absolute" : "fixed",
                    top: addUnitPx(stickyOffsetTop),
                };
            }
            active = true;
        }
        else if (arrayedIndex === activeArrayedIndex - 1) {
            const listRect = getListRect();
            const anchorRects = getAnchorRects();
            const currentAnchor = anchorRects[arrayedIndex];
            const currentOffsetTop = currentAnchor.top;
            const targetOffsetTop = arrayedIndex === anchorRects.length - 1 ? listRect.top : anchorRects[arrayedIndex + 1].top;
            const parentOffsetHeight = targetOffsetTop - currentOffsetTop;
            const translateY = parentOffsetHeight - currentAnchor.height;
            anchorStyle = {
                position: "relative",
                transform: `translate3d(0, ${addUnitPx(translateY)}, 0)`,
            };
            active = true;
        }
        else {
            wrapperStyle = {};
            anchorStyle = {};
            active = false;
        }
    }
    return (React.createElement(View, { ref: rootRef, className: classNames(prefixClassname("index-list__anchor-wrapper"), className), style: wrapperStyle, ...restProps },
        React.createElement(View, { className: classNames(prefixClassname("index-list__anchor"), {
                [prefixClassname("index-list__anchor--sticky")]: active,
                [HAIRLINE_BORDER_BOTTOM]: active,
            }), style: anchorStyle, children: children ?? index })));
});
export default IndexListAnchor;
