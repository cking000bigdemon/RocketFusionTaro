import { useUncontrolled } from "@taroify/hooks/index.js";
import { Clear } from "@taroify/icons/index.js";
import { cloneIconElement } from "@taroify/icons/utils/index.js";
import classNames from "classnames";
import _isPlainObject from "lodash/isPlainObject";
import _isEmpty from "lodash/isEmpty";
import * as React from "react";
import { useMemo, useState } from "react";
import { prefixClassname } from "../styles/index.js";
import { inBrowser } from "../utils/base.js";
import { preventDefault } from "../utils/dom/event.js";
import NativeInput from "./native-input.js";
export function resolveOnChange(e, onChange, detailValue) {
    if (!onChange) {
        return;
    }
    if (e.type === "click" || e.type === "tap") {
        const { detail } = e;
        const event = Object.assign({}, e, {
            detail: {
                ...(_isPlainObject(detail) ? detail : {}),
                value: "",
            },
        });
        onChange(event);
        return;
    }
    if (detailValue !== undefined) {
        const { detail } = e;
        const event = Object.assign({}, e, {
            detail: {
                ...(_isPlainObject(detail) ? detail : {}),
                value: detailValue,
            },
        });
        onChange(event);
        return;
    }
    onChange(e);
}
function Input(props) {
    const { className, placeholderClass, placeholderClassName, value: valueProp, readonly, disabled, align, color, clearable, clearTrigger = "focus", clearIcon = React.createElement(Clear, null), onInput, onChange, onFocus, onBlur, onClear, ...restProps } = props;
    const { value, setValue } = useUncontrolled({ value: valueProp });
    const [focused, setFocused] = useState(false);
    const allowClear = useMemo(() => {
        if (clearable && !disabled) {
            const hasValue = !_isEmpty(value);
            const trigger = clearTrigger === "always" || (clearTrigger === "focus" && focused);
            return hasValue && trigger;
        }
        return false;
    }, [clearTrigger, clearable, disabled, focused, value]);
    const handleClear = (event) => {
        preventDefault(event, true);
        resolveOnChange(event, onChange, "");
        resolveOnChange(event, onInput, "");
        onClear?.(event);
        setValue("");
    };
    const handleFocus = (event) => {
        setFocused(true);
        onFocus?.(event);
    };
    const handleInput = (event) => {
        onInput?.(event);
        onChange?.(event);
        setValue(event.detail.value);
    };
    const handleBlur = (event) => {
        onBlur?.(event);
        setTimeout(() => setFocused(false), 80);
    };
    return (React.createElement(React.Fragment, null,
        React.createElement(NativeInput, { className: classNames(prefixClassname("input"), {
                [prefixClassname("input--disabled")]: disabled,
                [prefixClassname("input--readonly")]: readonly,
                [prefixClassname("input--right")]: align === "right",
                [prefixClassname("input--center")]: align === "center",
                [prefixClassname("input--left")]: align === "left",
                [prefixClassname("input--primary")]: color === "primary",
                [prefixClassname("input--info")]: color === "info",
                [prefixClassname("input--success")]: color === "success",
            }, className), placeholderClass: classNames(placeholderClass, placeholderClassName, prefixClassname("input__placeholder"), {
                [prefixClassname("input__placeholder--primary")]: color === "primary",
                [prefixClassname("input__placeholder--info")]: color === "info",
                [prefixClassname("input__placeholder--success")]: color === "success",
            }), disabled: inBrowser ? disabled : disabled || readonly, readonly: readonly, color: color, value: value, onFocus: handleFocus, onInput: handleInput, onBlur: handleBlur, ...restProps }),
        allowClear &&
            cloneIconElement(clearIcon, {
                className: prefixClassname("input__clear"),
                onClick: handleClear,
            })));
}
export default Input;
