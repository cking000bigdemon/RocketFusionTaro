import { useGetter, useToRef } from "@taroify/hooks/index.js";
import { View, ScrollView } from "@tarojs/components";
import classNames from "classnames";
import * as React from "react";
import { forwardRef, useImperativeHandle } from "react";
import { useCallback, useEffect, useMemo, useRef } from "react";
import { nextTick, usePageScroll } from "@tarojs/taro";
import { useMemoizedFn, useDidEffect } from "../hooks/index.js";
import { prefixClassname } from "../styles/index.js";
import { getRect } from "../utils/dom/rect.js";
import { getScrollParent } from "../utils/dom/scroll.js";
import { raf } from "../utils/raf.js";
import { debounce } from "../utils/lodash-polyfill.js";
import PullRefreshContext from "../pull-refresh/pull-refresh.context.js";
function useAssignLoading(state) {
    const getState = useGetter(state);
    const value = getState();
    const valueRef = useRef();
    if (valueRef.current !== value) {
        valueRef.current = value;
    }
    const isLoading = useCallback(() => valueRef.current, []);
    const setLoading = useCallback((newValue) => (valueRef.current = newValue), []);
    return useMemo(() => ({
        isLoading,
        setLoading,
    }), [isLoading, setLoading]);
}
function List(props, ref) {
    const { className, loading: loadingProp = false, hasMore = true, direction = "down", offset = 100, immediateCheck: immediateCheckProp = true, fixedHeight = false, disabled = false, children, onLoad, onScroll: onScrollProp, ...restProps } = props;
    const rootRef = useRef();
    const scrollRef = useRef();
    const edgeRef = useRef();
    const onLoadRef = useToRef(onLoad);
    const immediateCheck = useToRef(immediateCheckProp);
    const { isLoading, setLoading } = useAssignLoading(loadingProp);
    const { onTouchStart: onPullRefreshTouchStart, onTouchEnd: onPullRefreshTouchEnd, onTouchMove: onPullRefreshTouchMove, } = React.useContext(PullRefreshContext);
    const check = useMemoizedFn(debounce(() => {
        raf(async () => {
            if (isLoading() || !hasMore || disabled) {
                return;
            }
            const scrollParentRect = await getRect(scrollRef);
            if (!scrollParentRect?.height) {
                return;
            }
            let isReachEdge;
            const edgeRect = await getRect(edgeRef);
            if (direction === "up") {
                isReachEdge = scrollParentRect.top - edgeRect.top <= offset;
            }
            else {
                isReachEdge = edgeRect.bottom - scrollParentRect.bottom <= offset;
            }
            if (isLoading() || !hasMore || disabled) {
                return;
            }
            if (isReachEdge) {
                setLoading(true);
                onLoadRef.current?.();
            }
        });
    }, 50));
    useImperativeHandle(ref, () => ({
        check,
    }));
    usePageScroll(() => {
        if (!fixedHeight) {
            check();
        }
    });
    const onScroll = (e) => {
        onScrollProp?.(e);
        if (fixedHeight) {
            check();
        }
    };
    const onTouchStart = (e) => {
        if (fixedHeight) {
            onPullRefreshTouchStart?.(e);
        }
    };
    const onTouchMove = (e) => {
        if (fixedHeight) {
            onPullRefreshTouchMove?.(e);
        }
    };
    const onTouchEnd = (e) => {
        if (fixedHeight) {
            onPullRefreshTouchEnd?.(e);
        }
    };
    useDidEffect(() => {
        check();
    }, [loadingProp, hasMore, check]);
    useEffect(() => {
        nextTick(async () => {
            if (fixedHeight) {
                scrollRef.current = rootRef.current;
            }
            else {
                scrollRef.current = await getScrollParent(rootRef);
            }
            if (immediateCheck.current) {
                check();
            }
        });
    }, [fixedHeight]);
    const Wrapper = useMemo(() => (fixedHeight ? ScrollView : View), [fixedHeight]);
    const listEdge = useMemo(() => React.createElement(View, { ref: edgeRef, className: prefixClassname("list__edge") }), []);
    return (React.createElement(Wrapper, { ref: rootRef, scrollY: fixedHeight, className: classNames(prefixClassname("list"), className), ...restProps, onScroll: onScroll, onTouchStart: onTouchStart, onTouchMove: onTouchMove, onTouchEnd: onTouchEnd },
        direction === "down" ? children : listEdge,
        direction === "up" ? children : listEdge));
}
export default forwardRef(List);
