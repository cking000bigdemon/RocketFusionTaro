import { View } from "@tarojs/components";
import classNames from "classnames";
import _range from "lodash/range";
import * as React from "react";
import { useMemo } from "react";
import { prefixClassname } from "../styles/index.js";
import { addUnitPx } from "../utils/format/unit.js";
const SpinIcon = _range(0, 12).map((key) => (React.createElement(View, { key: key, className: prefixClassname("loading__spinner__item") })));
function LoadingSpinner(props) {
    const { size } = props;
    const rootStyle = useMemo(() => ({
        width: addUnitPx(size) || "",
        height: addUnitPx(size) || "",
    }), [size]);
    return (React.createElement(View, { className: prefixClassname("loading__spinner"), style: rootStyle }, SpinIcon));
}
function LoadingCircular(props) {
    const { size } = props;
    const rootStyle = useMemo(() => ({
        width: addUnitPx(size) || "",
        height: addUnitPx(size) || "",
    }), [size]);
    return React.createElement(View, { className: prefixClassname("loading__circular"), style: rootStyle });
}
export default function Loading(props) {
    const { className, size, type = "circular", direction = "horizontal", children, ...restProps } = props;
    return (React.createElement(View, { className: classNames(prefixClassname("loading"), prefixClassname(`loading--${direction}`), prefixClassname(`loading--${type}`), className), ...restProps },
        type === "spinner" && React.createElement(LoadingSpinner, { size: size }),
        type === "circular" && React.createElement(LoadingCircular, { size: size }),
        children && React.createElement(View, { className: prefixClassname("loading__text"), children: children })));
}
