import { View } from "@tarojs/components";
import { nextTick } from "@tarojs/taro";
import classNames from "classnames";
import * as React from "react";
import { useImperativeHandle, forwardRef } from "react";
import { Children, isValidElement, useEffect, useMemo, useRef, useState, } from "react";
import { prefixClassname } from "../styles/index.js";
import { getRect } from "../utils/dom/rect.js";
import { addUnitPx } from "../utils/format/unit.js";
import { doubleRaf } from "../utils/raf.js";
import { NoticeBarAction } from "./notice-bar-action.js";
import { NoticeBarIcon } from "./notice-bar-icon.js";
function useChildren(children) {
    const __children__ = {
        icon: undefined,
        text: [],
        action: undefined,
    };
    Children.forEach(children, (child) => {
        if (isValidElement(child)) {
            const element = child;
            const elementType = element.type;
            if (elementType === NoticeBarIcon) {
                __children__.icon = element;
            }
            else if (elementType === NoticeBarAction) {
                __children__.action = element;
            }
            else {
                __children__.text.push(child);
            }
        }
        else {
            __children__.text.push(child);
        }
    });
    return __children__;
}
function NoticeBar(props, ref) {
    const { className, delay = 1000, speed = 60, wordwrap, scrollable = false, children: childrenProp, onReplay, ...restProps } = props;
    const { icon, text, action } = useChildren(childrenProp);
    const ellipsis = !scrollable && !wordwrap;
    const startTimerRef = useRef();
    const wrapRef = useRef();
    const contentRef = useRef();
    const [offset, setOffset] = useState(0);
    const [duration, setDuration] = useState(0);
    const wrapWidthRef = useRef(0);
    const contentWidthRef = useRef(0);
    const contentStyle = useMemo(() => ({
        transform: offset ? `translateX(${addUnitPx(offset)})` : "",
        transitionDuration: `${duration}s`,
    }), [offset, duration]);
    function onTransitionEnd() {
        setOffset(wrapWidthRef.current);
        setDuration(0);
        nextTick(() => {
            doubleRaf(() => {
                setOffset(-contentWidthRef.current);
                setDuration((contentWidthRef.current + wrapWidthRef.current) / +speed);
                onReplay?.();
            });
        });
    }
    function reset() {
        wrapWidthRef.current = 0;
        contentWidthRef.current = 0;
        setOffset(0);
        setDuration(0);
        if (startTimerRef.current) {
            clearTimeout(startTimerRef.current);
        }
        startTimerRef.current = setTimeout(async () => {
            if (!wrapRef.current || !contentRef.current || !scrollable) {
                return;
            }
            nextTick(() => Promise.all([getRect(wrapRef), getRect(contentRef)]).then(([{ width: wrapRefWidth }, { width: contentRefWidth }]) => {
                if (scrollable || contentRefWidth > wrapRefWidth) {
                    doubleRaf(() => {
                        wrapWidthRef.current = wrapRefWidth;
                        contentWidthRef.current = contentRefWidth;
                        setOffset(-contentRefWidth);
                        setDuration(contentRefWidth / +speed);
                    });
                }
            }));
        }, +delay);
    }
    useImperativeHandle(ref, () => ({
        reset,
    }));
    useEffect(reset, []);
    return (React.createElement(View, { className: classNames(prefixClassname("notice-bar"), {
            [prefixClassname("notice-bar--wordwrap")]: wordwrap,
        }, className), ...restProps },
        icon,
        React.createElement(View, { ref: wrapRef, className: prefixClassname("notice-bar__wrap") },
            React.createElement(View, { ref: contentRef, style: contentStyle, className: classNames(prefixClassname("notice-bar__content"), {
                    [prefixClassname("ellipsis")]: ellipsis,
                }), children: text, onTransitionEnd: onTransitionEnd })),
        action));
}
export default forwardRef(NoticeBar);
