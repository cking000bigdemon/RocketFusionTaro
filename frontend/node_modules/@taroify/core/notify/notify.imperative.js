import _assign from "lodash/assign";
import _isPlainObject from "lodash/isPlainObject";
import { createElement, isValidElement } from "react";
import { document } from "@tarojs/runtime";
import { mountPortal, unmountPortal, getPagePath } from "../utils/dom/portal.js";
import { notifyEvents, notifySelectorSet, } from "./notify.shared.js";
import Notify from "./notify.js";
const initialNotifyOptions = {
    className: undefined,
    style: undefined,
    duration: undefined,
    message: undefined,
    color: undefined,
};
const DEFAULT_NOTIFY_SELECTOR = "#notify";
const DEFAULT_NOTIFY_SELECTOR_CREATE = "notify";
const defaultNotifyOptions = {};
resetDefaultNotifyOptions();
export function setDefaultNotifyOptions(options) {
    _assign(defaultNotifyOptions, options);
}
export function resetDefaultNotifyOptions() {
    _assign(defaultNotifyOptions, {
        selector: DEFAULT_NOTIFY_SELECTOR,
    });
}
function parseNotifyOptions(message) {
    const options = !isValidElement(message) && _isPlainObject(message) ? message : { message };
    return _assign({}, initialNotifyOptions, defaultNotifyOptions, options);
}
const notifyView = document.createElement("view");
export function openNotify(args) {
    const { selector = "#notify", ...restOptions } = parseNotifyOptions(args);
    if (selector && notifySelectorSet.has(`${getPagePath()}__${selector}`)) {
        notifyEvents.trigger("open", {
            selector,
            ...restOptions,
        });
    }
    else {
        const onTransitionExited = restOptions.onTransitionExited;
        restOptions.onTransitionExited = () => {
            onTransitionExited?.();
            unmountPortal(notifyView);
        };
        mountPortal(createElement(Notify, {
            ...restOptions,
            children: restOptions.message,
            defaultOpen: true,
            id: selector === DEFAULT_NOTIFY_SELECTOR ? DEFAULT_NOTIFY_SELECTOR_CREATE : selector,
        }), notifyView);
    }
}
export function createNotify(color) {
    return (args) => {
        const options = parseNotifyOptions(args);
        options.color = color;
        openNotify(options);
    };
}
export function closeNotify(selector) {
    notifyEvents.trigger("close", selector ? `#${selector}` : defaultNotifyOptions.selector);
}
