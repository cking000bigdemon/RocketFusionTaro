import { useUncontrolled } from "@taroify/hooks/index.js";
import classNames from "classnames";
import * as React from "react";
import { useEffect } from "react";
import { useTimeout } from "../hooks/index.js";
import Popup from "../popup/index.js";
import { prefixClassname } from "../styles/index.js";
import { getElementSelector, matchSelector, prependPageSelector, usePrependPageSelector, } from "../utils/dom/element.js";
import { useObject, useToRef } from "../utils/state.js";
import mergeStyle from "../utils/merge-style.js";
import { notifyEvents, notifySelectorSet, } from "./notify.shared.js";
const PRESET_COLORS = ["primary", "success", "warning", "danger"];
function useNotifyOpen(cb) {
    useEffect(() => {
        notifyEvents.on("open", cb);
        return () => {
            notifyEvents.off("open", cb);
        };
    }, []);
}
function useNotifyClose(cb) {
    useEffect(() => {
        notifyEvents.on("close", cb);
        return () => {
            notifyEvents.off("close", cb);
        };
    }, []);
}
function Notify(props) {
    const { object: { id, style: styleProp, className, defaultOpen, open: openProp, duration = 3000, type: typeProp, background: backgroundProp, color: colorProp = "danger", children, onClose, ...restProps }, setObject, } = useObject(props);
    const style = mergeStyle(styleProp, {
        background: backgroundProp,
        ...(!PRESET_COLORS.includes(colorProp) && { "--notify-color": colorProp }),
    });
    const rootSelectorRef = useToRef(usePrependPageSelector(getElementSelector(id)));
    const { value: open = false, setValue: setOpen } = useUncontrolled({
        defaultValue: defaultOpen,
        value: openProp,
        onChange: (aOpened) => !aOpened && onClose?.(aOpened),
    });
    const { stop: stopAutoClose, restart: restartAutoClose } = useTimeout();
    useEffect(() => {
        rootSelectorRef.current && notifySelectorSet.add(rootSelectorRef.current);
        return () => {
            rootSelectorRef.current && notifySelectorSet.delete(rootSelectorRef.current);
        };
    }, []);
    useEffect(() => {
        if (open) {
            restartAutoClose(() => {
                setOpen(false);
                stopAutoClose();
            }, duration);
        }
        else {
            stopAutoClose();
        }
        return () => stopAutoClose();
    }, [duration, open, restartAutoClose, setObject, setOpen, stopAutoClose]);
    useNotifyOpen(({ selector, message, ...restOptions }) => {
        if (matchSelector(prependPageSelector(selector), rootSelectorRef.current)) {
            restartAutoClose();
            setObject({
                children: message,
                ...restOptions,
            });
            setOpen(true);
        }
    });
    useNotifyClose((selector) => {
        if (matchSelector(prependPageSelector(selector), rootSelectorRef.current)) {
            setOpen(false);
        }
    });
    return (React.createElement(Popup, { id: id, className: classNames(prefixClassname("notify"), {
            [prefixClassname(`notify--${typeProp || colorProp}`)]: PRESET_COLORS.includes(typeProp || colorProp),
        }, className), style: style, placement: "top", open: open, duration: 200, ...restProps },
        React.createElement(Popup.Backdrop, { open: false }),
        children));
}
export default Notify;
