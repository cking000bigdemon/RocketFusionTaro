import { View } from "@tarojs/components";
import classNames from "classnames";
import * as React from "react";
import { useContext, useState } from "react";
import { prefixClassname } from "../styles/index.js";
import { useTouch } from "../utils/touch.js";
import NumberKeyboardContext from "./number-keyboard.context.js";
function NumberKeyboardKey(props) {
    const { wider, code = "extra", size, color, children, onPress } = props;
    const { onKeyPress } = useContext(NumberKeyboardContext);
    const value = children ?? "";
    const [active, setActive] = useState(false);
    const touch = useTouch();
    const onTouchStart = (event) => {
        touch.start(event);
        setActive(true);
    };
    const onTouchMove = (event) => {
        touch.move(event);
        if (touch.direction) {
            setActive(false);
        }
    };
    const onTouchEnd = (event) => {
        if (active) {
            if (!children) {
                event.preventDefault();
            }
            setActive(false);
            onPress?.(value, code ?? value);
            onKeyPress?.(value, code ?? value);
        }
    };
    const renderContent = () => {
        switch (code) {
            case "backspace":
                return children ?? React.createElement(View, { className: "taroify-backspace" });
            case "keyboard-hide":
                return children ?? React.createElement(View, { className: "taroify-keyboard-hide" });
            default:
                return children;
        }
    };
    return (React.createElement(View, { className: classNames(prefixClassname("key__wrapper"), {
            [prefixClassname("key__wrapper--wider")]: wider,
        }), onTouchStart: onTouchStart, onTouchMove: onTouchMove, onTouchEnd: onTouchEnd, onTouchCancel: onTouchEnd },
        React.createElement(View, { className: classNames(prefixClassname("key"), {
                [prefixClassname("key--active")]: active,
                [prefixClassname("key--large")]: size === "large",
                [prefixClassname("key--blue")]: color === "blue",
            }) }, renderContent())));
}
export default NumberKeyboardKey;
