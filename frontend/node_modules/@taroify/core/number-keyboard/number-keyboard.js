import { View } from "@tarojs/components";
import classNames from "classnames";
import _isString from "lodash/isString";
import _isNumber from "lodash/isNumber";
import _isArray from "lodash/isArray";
import _size from "lodash/size";
import * as React from "react";
import { Children, cloneElement, isValidElement, useMemo, } from "react";
import { prefixClassname } from "../styles/index.js";
import Transition from "../transition/index.js";
import NumberKeyboardHeader from "./number-keyboard-header.js";
import NumberKeyboardKey from "./number-keyboard-key.js";
import { isNumberKeyboardKeyElement, } from "./number-keyboard-key.shared.js";
import NumberKeyboardKeys from "./number-keyboard-keys.js";
import NumberKeyboardSidebar from "./number-keyboard-sidebar.js";
import NumberKeyboardContext from "./number-keyboard.context.js";
function createBasicKeys(random) {
    const keys = Array(9)
        .fill("")
        .map((_, i) => React.createElement(NumberKeyboardKey, { key: i + 1, children: i + 1 }));
    if (random) {
        keys.sort(() => (Math.random() > 0.5 ? 1 : -1));
    }
    return keys;
}
export function createExtraNumberKeyboardKey(extraKey) {
    if (_isString(extraKey) || _isNumber(extraKey)) {
        return React.createElement(NumberKeyboardKey, { key: extraKey, children: extraKey });
    }
    else if (isNumberKeyboardKeyElement(extraKey)) {
        const element = extraKey;
        const elementProps = element.props;
        return cloneElement(extraKey, {
            key: element.key ?? elementProps.children ?? elementProps.code,
        });
    }
    return undefined;
}
function createCustomKeys(extraKey) {
    if (extraKey === undefined) {
        return [
            React.createElement(NumberKeyboardKey, { key: "keyboard-hide", code: "keyboard-hide" }),
            React.createElement(NumberKeyboardKey, { key: 0, children: 0 }),
            React.createElement(NumberKeyboardKey, { key: "backspace", code: "backspace" }),
        ];
    }
    if (_isString(extraKey) || _isNumber(extraKey) || isNumberKeyboardKeyElement(extraKey)) {
        return [
            createExtraNumberKeyboardKey(extraKey),
            React.createElement(NumberKeyboardKey, { key: 0, children: 0 }),
            React.createElement(NumberKeyboardKey, { key: "backspace", code: "backspace" }),
        ];
    }
    if (_isArray(extraKey) && _size(extraKey) === 1) {
        return [
            createExtraNumberKeyboardKey(extraKey[0]),
            React.createElement(NumberKeyboardKey, { key: 0, wider: true, children: 0 }),
        ];
    }
    if (_isArray(extraKey) && _size(extraKey) === 2) {
        const wider = extraKey.filter((key) => key !== undefined).length === 1;
        return [
            createExtraNumberKeyboardKey(extraKey[0]),
            React.createElement(NumberKeyboardKey, { key: 0, wider: wider, children: 0 }),
            createExtraNumberKeyboardKey(extraKey[1]),
        ];
    }
    return [];
}
function useNumberKeyboardChildren(children, title) {
    return useMemo(() => {
        const __children__ = {
            sidebar: undefined,
        };
        Children.forEach(children, (child) => {
            if (isValidElement(child)) {
                const element = child;
                const elementType = element.type;
                if (elementType === NumberKeyboardHeader) {
                    __children__.header = element;
                }
                if (elementType === NumberKeyboardSidebar) {
                    __children__.sidebar = element;
                }
            }
        });
        if (title && !__children__.header) {
            __children__.header = React.createElement(NumberKeyboardHeader, null);
        }
        return __children__;
    }, [children, title]);
}
function NumberKeyboard(props) {
    const { className, open, title, extraKey, random = false, children: childrenProp, onKeyPress, onBackspace, onHide, ...restProps } = props;
    const { header, sidebar } = useNumberKeyboardChildren(childrenProp, title);
    const basicKeys = useMemo(() => createBasicKeys(random), [random]);
    const keys = useMemo(() => [...basicKeys, ...createCustomKeys(extraKey)], [basicKeys, extraKey]);
    const handleKeyPress = (value, code) => {
        onKeyPress?.(value, code);
        if (code === "backspace") {
            onBackspace?.();
        }
        else if (code === "keyboard-hide") {
            onHide?.();
        }
    };
    return (React.createElement(NumberKeyboardContext.Provider, { value: {
            title,
            onKeyPress: handleKeyPress,
        } },
        React.createElement(Transition, { in: open, appear: true, name: "slide-up" },
            React.createElement(View, { className: classNames(prefixClassname("number-keyboard"), {
                    [prefixClassname("number-keyboard--with-title")]: header,
                }, className), ...restProps },
                header,
                React.createElement(View, { className: prefixClassname("number-keyboard__body") },
                    React.createElement(NumberKeyboardKeys, { children: keys }),
                    sidebar)))));
}
export default NumberKeyboard;
