import { View } from "@tarojs/components";
import classNames from "classnames";
import * as React from "react";
import { Children, cloneElement, isValidElement, useContext, useMemo, Fragment, } from "react";
import { prefixClassname } from "../styles/index.js";
import { HAIRLINE_BORDER } from "../styles/hairline.js";
import PaginationContext from "./pagination.context.js";
import { ItemType } from "./pagination.shared.js";
function rangePages(start, end) {
    const length = end - start + 1;
    return Array.from({ length }, (_, i) => start + i);
}
export function makePageItems(start, end) {
    return rangePages(start, end).map((page) => React.createElement(Pagination.Item, { key: page, page: page }));
}
function usePagination(options) {
    const { current, count, siblingCount, children, mode } = options;
    const siblingRange = siblingCount * 2 + 1;
    let start = Math.max(current - siblingCount, 1);
    let end = start + siblingRange - 1;
    if (end > count) {
        end = count;
        start = Math.max(end - siblingRange + 1, 1);
    }
    const hasPrevious = current > 1;
    const hasStartEllipsis = start > 1;
    const hasEndEllipsis = end < count;
    const hasNext = current < count;
    const items = useMemo(() => (mode === "simple" ? undefined : makePageItems(start, end)), [start, end]);
    const __children__ = {
        previous: undefined,
        startEllipsis: undefined,
        items,
        desc: mode === "simple" ? React.createElement(Pagination.Desc, null) : undefined,
        next: undefined,
    };
    Children.forEach(children, (child) => {
        if (!isValidElement(child)) {
            return;
        }
        const element = child;
        const elementType = element.type;
        if (elementType === Pagination.Item) {
            const { type: itemType } = element.props;
            if (itemType === ItemType.Previous && __children__.previous === undefined) {
                __children__.previous = cloneElement(element, { disabled: !hasPrevious });
            }
            else if (itemType === ItemType.StartEllipsis &&
                __children__.startEllipsis === undefined &&
                hasStartEllipsis) {
                __children__.startEllipsis = element;
            }
            else if (itemType === ItemType.EndEllipsis && hasEndEllipsis) {
                __children__.endEllipsis = element;
            }
            else if (itemType === ItemType.Next) {
                __children__.next = cloneElement(element, { disabled: !hasNext });
            }
        }
    });
    if (__children__.previous === undefined) {
        __children__.previous = (React.createElement(Pagination.Item, { page: Number.MIN_SAFE_INTEGER, type: "previous", disabled: !hasPrevious }));
    }
    if (__children__.next === undefined) {
        __children__.next = (React.createElement(Pagination.Item, { page: Number.MAX_SAFE_INTEGER, type: "next", disabled: !hasNext }));
    }
    return __children__;
}
function Pagination(props) {
    const { className, mode = "multi", current = 1, prevText = "上一页", nextText = "下一页", siblingCount = 2, count = 1, children, onChange, ...restProps } = props;
    const { previous, startEllipsis, items, endEllipsis, next, desc } = usePagination({
        current,
        siblingCount,
        count,
        children,
        mode,
    });
    function emitClick(page) {
        const { page: pageNumber } = page;
        const siblingRange = siblingCount * 2 + 1;
        if (page.type === ItemType.Previous) {
            onChange?.(Math.max(current - 1, 1));
        }
        else if (page.type === ItemType.StartEllipsis) {
            onChange?.(Math.max(current - siblingRange, 1));
        }
        else if (page.type === ItemType.Page) {
            onChange?.(pageNumber);
        }
        else if (page.type === ItemType.EndEllipsis) {
            onChange?.(Math.min(current + siblingRange, count));
        }
        else if (page.type === ItemType.Next) {
            onChange?.(Math.min(current + 1, count));
        }
    }
    return (React.createElement(View, { className: classNames(prefixClassname("pagination"), className), ...restProps },
        React.createElement(PaginationContext.Provider, { value: {
                current,
                prevText,
                nextText,
                count,
                siblingCount,
                emitClick,
            } },
            previous,
            mode === "simple" ? (desc) : (React.createElement(Fragment, null,
                startEllipsis,
                items,
                endEllipsis)),
            next)));
}
(function (Pagination) {
    function BaseItem(props) {
        const { className, style, hidden, disabled, children, onClick } = props;
        return (React.createElement(View, { className: classNames(prefixClassname("pagination__item"), HAIRLINE_BORDER, {
                [prefixClassname("pagination__item--disabled")]: disabled,
                [prefixClassname("pagination__item--hidden")]: hidden,
            }, className), style: style, children: children, onClick: onClick }));
    }
    function Item(props) {
        const { className, page = 0, type = ItemType.Page, disabled = false, children, onClick, ...restProps } = props;
        const { current, prevText, nextText, emitClick } = useContext(PaginationContext);
        const active = page === current;
        function renderChildren() {
            let __children__ = children;
            if (__children__ === undefined) {
                if (type === ItemType.Previous) {
                    __children__ = prevText;
                }
                else if (type === ItemType.StartEllipsis || type === ItemType.EndEllipsis) {
                    __children__ = "...";
                }
                else if (type === ItemType.Next) {
                    __children__ = nextText;
                }
                else if (type === ItemType.Page) {
                    __children__ = page;
                }
            }
            return __children__;
        }
        return (React.createElement(BaseItem, { className: classNames({
                [prefixClassname("pagination__item--active")]: !disabled && active,
                [prefixClassname("pagination__page")]: type === ItemType.Page,
                [prefixClassname("pagination__start-ellipsis")]: type === ItemType.StartEllipsis,
                [prefixClassname("pagination__end-ellipsis")]: type === ItemType.EndEllipsis,
                [prefixClassname("pagination__button")]: type === ItemType.Previous || ItemType.Next,
            }, className), disabled: disabled && !active, children: renderChildren(), onClick: () => emitClick?.({ page, type: type }), ...restProps }));
    }
    Pagination.Item = Item;
    function Desc() {
        const { current, count } = useContext(PaginationContext);
        return (React.createElement(View, { className: classNames(prefixClassname("pagination__desc")) },
            current,
            "/",
            count));
    }
    Pagination.Desc = Desc;
})(Pagination || (Pagination = {}));
export default Pagination;
