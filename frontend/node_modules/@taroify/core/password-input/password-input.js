import { View } from "@tarojs/components";
import classNames from "classnames";
import _isBoolean from "lodash/isBoolean";
import * as React from "react";
import { useCallback, useMemo } from "react";
import { prefixClassname } from "../styles/index.js";
import { HAIRLINE_BORDER_LEFT, HAIRLINE_BORDER_SURROUND } from "../styles/hairline.js";
import { stopPropagation } from "../utils/dom/event.js";
import { createVariantElement } from "../utils/element.js";
import { addUnitPx } from "../utils/format/unit.js";
import PasswordInputFeedback from "./password-input-feedback.js";
function PasswordInput(props) {
    const { className, value = "", length = 6, gutter, mask = true, focused: focusedProp, focus: focusProp = false, feedback: feedbackProp, onFocus, ...restProps } = props;
    const feedback = createVariantElement(PasswordInputFeedback, feedbackProp);
    const focus = useMemo(() => (_isBoolean(focusedProp) ? focusedProp : focusProp), [focusProp, focusedProp]);
    if (_isBoolean(focusedProp)) {
        console.warn("[Deprecated] The focused prop is deprecated. Please use the focus prop.");
    }
    const onTouchStart = useCallback((event) => {
        stopPropagation(event);
        onFocus?.(event);
    }, [onFocus]);
    const points = useMemo(() => {
        const Points = [];
        for (let i = 0; i < length; i++) {
            const char = value[i];
            const bordered = i !== 0 && !gutter;
            const showCursor = focus && i === value.length;
            let style = {};
            if (i !== 0 && gutter) {
                style = { marginLeft: addUnitPx(gutter) };
            }
            Points.push(React.createElement(View, { key: i, className: classNames(prefixClassname("password-input__item"), {
                    [HAIRLINE_BORDER_LEFT]: bordered,
                    [prefixClassname("password-input__item--focus")]: showCursor,
                }), style: style },
                mask ? (React.createElement(View, { className: prefixClassname("password-input__item--mask"), style: { visibility: char ? "visible" : "hidden" } })) : (char),
                showCursor && React.createElement(View, { className: prefixClassname("password-input__cursor") })));
        }
        return Points;
    }, [focus, gutter, length, mask, value]);
    return (React.createElement(View, { className: classNames(prefixClassname("password-input"), className), ...restProps },
        React.createElement(View, { className: classNames(prefixClassname("password-input__security"), {
                [HAIRLINE_BORDER_SURROUND]: !gutter,
            }), onTouchStart: onTouchStart, children: points }),
        feedback));
}
export default PasswordInput;
