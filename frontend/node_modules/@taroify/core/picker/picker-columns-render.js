import { View } from "@tarojs/components";
import classNames from "classnames";
import _map from "lodash/map";
import _get from "lodash/get";
import * as React from "react";
import { useContext, useMemo } from "react";
import { prefixClassname } from "../styles/index.js";
import { HAIRLINE_BORDER_UNSET_TOP_BOTTOM } from "../styles/hairline.js";
import { preventDefault } from "../utils/dom/event.js";
import { addUnitPx } from "../utils/format/unit.js";
import { useRendered } from "../utils/state.js";
import PickerColumn from "./picker-column.js";
import PickerContext from "./picker.context.js";
import { getPickerOptionKey } from "./picker.shared.js";
import usePickerOptions from "./use-picker-options.js";
function PickerColumnsRender(props) {
    const { className, style, children, readonly, values, siblingCount, onChange, ...restProps } = props;
    const { setColumnRefs, clearColumnRefs, optionHeight } = useContext(PickerContext);
    const columns = usePickerOptions(children);
    const visibleCount = siblingCount * 2;
    const wrapHeight = useMemo(() => optionHeight * visibleCount, [visibleCount, optionHeight]);
    const rootStyle = useMemo(() => ({
        ...style,
        height: addUnitPx(wrapHeight),
    }), [style, wrapHeight]);
    const maskStyle = useMemo(() => ({
        backgroundSize: `100% ${addUnitPx((wrapHeight - optionHeight) / 2)}`,
    }), [wrapHeight, optionHeight]);
    const frameStyle = useMemo(() => ({
        height: addUnitPx(optionHeight),
    }), [optionHeight]);
    const columnsRender = useRendered(() => _map(columns, (column, columnIndex) => {
        const { children: options, ...restColumnProps } = column;
        clearColumnRefs?.();
        return (React.createElement(PickerColumn, { ref: setColumnRefs?.(columnIndex), key: getPickerOptionKey(column) ?? columnIndex, children: options, readonly: readonly, ...restColumnProps, visibleCount: visibleCount, optionHeight: optionHeight, value: _get(values, columnIndex), onChange: (option, emitChange) => onChange?.(option, {
                ...column,
                index: columnIndex,
            }, emitChange) }));
    }));
    return (React.createElement(View, { className: classNames(prefixClassname("picker__columns"), className), style: rootStyle, catchMove: true, onTouchMove: preventDefault, ...restProps },
        columnsRender,
        React.createElement(View, { className: prefixClassname("picker__mask"), style: maskStyle }),
        React.createElement(View, { className: classNames([HAIRLINE_BORDER_UNSET_TOP_BOTTOM, prefixClassname("picker__frame")]), style: frameStyle })));
}
export default PickerColumnsRender;
