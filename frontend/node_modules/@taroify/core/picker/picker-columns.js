import _map from "lodash/map";
import _filter from "lodash/filter";
import _isUndefined from "lodash/isUndefined";
import _set from "lodash/set";
import _size from "lodash/size";
import * as React from "react";
import { useCallback, useContext } from "react";
import PickerColumnsRender from "./picker-columns-render.js";
import PickerContext from "./picker.context.js";
import { getPickerValue, validPickerColumn } from "./picker.shared.js";
function PickerColumns(props) {
    const { readonly, values, siblingCount, getValueOptions, isMultiValue, setValueOptions, onChange, } = useContext(PickerContext);
    const onColumnChange = useCallback((option, unverifiedColumn, emitChange) => {
        setValueOptions?.(option, unverifiedColumn);
        const column = validPickerColumn(unverifiedColumn);
        if (column && emitChange) {
            const { index: columnIndex } = column;
            const newValues = _map(_filter(getValueOptions?.(), (newOption) => !_isUndefined(newOption)), ({ value }) => value);
            _set(newValues, columnIndex, option?.value);
            const aValues = getPickerValue(newValues, isMultiValue?.() || _size(newValues) > 1);
            onChange?.(aValues, { ...option }, { ...column });
        }
    }, [getValueOptions, isMultiValue, onChange, setValueOptions]);
    return (React.createElement(PickerColumnsRender, { ...props, readonly: readonly, values: values, siblingCount: siblingCount, onChange: onColumnChange }));
}
export default PickerColumns;
