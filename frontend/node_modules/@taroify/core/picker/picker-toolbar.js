import { View } from "@tarojs/components";
import classNames from "classnames";
import _isEmpty from "lodash/isEmpty";
import * as React from "react";
import { Children, cloneElement, isValidElement, useMemo, } from "react";
import { prefixClassname } from "../styles/index.js";
import PickerButton, { PickerButtonType } from "./picker-button.js";
import PickerTitle from "./picker-title.js";
function usePickerToolbarChildren(children) {
    return useMemo(() => {
        const __children__ = {
            title: undefined,
            cancel: undefined,
            confirm: undefined,
        };
        Children.forEach(children, (child, index) => {
            if (isValidElement(child)) {
                const element = child;
                const { type: elementType } = element;
                if (elementType === PickerTitle) {
                    __children__.title = element;
                }
                else if (elementType === PickerButton) {
                    const { props } = element;
                    const { type } = props;
                    if (type === PickerButtonType.Cancel) {
                        __children__.cancel = element;
                    }
                    else if (type === PickerButtonType.Confirm) {
                        __children__.confirm = element;
                    }
                    else if (_isEmpty(type) && _isEmpty(__children__.cancel)) {
                        __children__.cancel = cloneElement(element, {
                            type: PickerButtonType.Cancel,
                        });
                    }
                    else if (_isEmpty(type) && _isEmpty(__children__.confirm)) {
                        __children__.confirm = cloneElement(element, {
                            type: PickerButtonType.Confirm,
                        });
                    }
                }
            }
        });
        return __children__;
    }, [children]);
}
export default function PickerToolbar(props) {
    const { className, children: childrenProp, ...restProps } = props;
    const { title, cancel, confirm } = usePickerToolbarChildren(childrenProp);
    return (React.createElement(View, { className: classNames(prefixClassname("picker__toolbar"), className), ...restProps },
        cancel,
        title,
        confirm));
}
