import _isPlainObject from "lodash/isPlainObject";
import { isValidElement, useMemo } from "react";
import Children from "../utils/children.js";
import { isTextElement } from "../utils/validate/index.js";
function elementToObject(element, index, depth, maxDepth) {
    if (isValidElement(element)) {
        const { props } = element;
        const { value, label, children, ...restProps } = props;
        const textChildren = isTextElement(children) ? children : undefined;
        return {
            index,
            value: value ?? label ?? textChildren,
            label: label ?? textChildren,
            children: isTextElement(children) || depth === maxDepth
                ? children
                : mapToChildrenOptions(children, depth + 1, maxDepth),
            ...restProps,
        };
    }
    if (_isPlainObject(element)) {
        return element;
    }
}
function mapToOption(nodeOrObject, index, depth, maxDepth) {
    return elementToObject(nodeOrObject, index, depth, maxDepth);
}
export function mapToChildrenOptions(children, depth, maxDepth) {
    return Children.map(children, (child, index) => {
        return mapToOption(child, index, depth, maxDepth);
    });
}
function usePickerOptions(children = undefined, options = {}) {
    const { depth = 1 } = options;
    return useMemo(() => mapToChildrenOptions(children, 0, depth), [depth, children]);
}
export default usePickerOptions;
