import { useToRef, useUncontrolled } from "@taroify/hooks/index.js";
import { View } from "@tarojs/components";
import classNames from "classnames";
import _isNumber from "lodash/isNumber";
import _isUndefined from "lodash/isUndefined";
import * as React from "react";
import { Children, forwardRef, isValidElement, useMemo, useEffect, } from "react";
import Backdrop from "../backdrop/index.js";
import { prefixClassname } from "../styles/index.js";
import Transition, { TransitionName } from "../transition/index.js";
import { isElementOf } from "../utils/validate/index.js";
import { useLockScrollTaro } from "../utils/dom/use-lock-scroll-taro.js";
import PopupBackdrop from "./popup-backdrop.js";
import PopupClose from "./popup-close.js";
import PopupContext from "./popup.context.js";
function toTransactionName(placement) {
    if (placement === "top") {
        return TransitionName.SlideDown;
    }
    if (placement === "bottom") {
        return TransitionName.SlideUp;
    }
    if (placement === "right") {
        return TransitionName.SlideRight;
    }
    if (placement === "left") {
        return TransitionName.SlideLeft;
    }
    return TransitionName.Fade;
}
function usePopupChildren(children) {
    return useMemo(() => {
        const __children__ = {
            backdrop: undefined,
            close: undefined,
            content: [],
        };
        Children.forEach(children, (child) => {
            if (isValidElement(child)) {
                const element = child;
                if (isElementOf(element, Backdrop)) {
                    __children__.backdrop = element;
                }
                else if (element.type === PopupClose) {
                    __children__.close = element;
                }
                else {
                    __children__.content.push(child);
                }
            }
            else {
                __children__.content.push(child);
            }
        });
        return __children__;
    }, [children]);
}
const Popup = forwardRef((props, ref) => {
    const { className, style: styleProp, defaultOpen, open: openProp, placement, rounded = false, lock = true, children, duration, transaction, transactionTimeout, transitionAppear = true, mountOnEnter = true, onClose, onTransitionEnter, onTransitionEntered, onTransitionExit, onTransitionExited, ...restProps } = props;
    const { value: open } = useUncontrolled({ defaultValue: defaultOpen, value: openProp });
    const onClosePropRef = useToRef(onClose);
    const initializedRef = useToRef(open);
    useLockScrollTaro(!!open && lock);
    useEffect(() => {
        if (initializedRef.current) {
            if (open === false)
                onClosePropRef.current?.(false);
        }
        else {
            initializedRef.current = true;
        }
    }, [open]);
    const transactionName = transaction ?? toTransactionName(placement);
    const { backdrop = React.createElement(PopupBackdrop, { lock: lock }), close, content } = usePopupChildren(children);
    const durationStyle = useMemo(() => (_isNumber(duration) ? { "--animation-duration-base": `${duration}ms` } : {}), [duration]);
    return (React.createElement(PopupContext.Provider, { value: {
            open,
            duration,
            placement,
            onClose,
        } },
        React.createElement(Transition, { in: open, name: transactionName, appear: transitionAppear, timeout: transactionTimeout || duration, mountOnEnter: mountOnEnter, onEnter: onTransitionEnter, onEntered: onTransitionEntered, onExit: onTransitionExit, onExited: onTransitionExited },
            React.createElement(View, { className: classNames(prefixClassname("popup"), {
                    [prefixClassname("popup--rounded")]: rounded,
                    [prefixClassname("popup--center")]: placement === "center" || _isUndefined(placement),
                    [prefixClassname("popup--top")]: placement === "top",
                    [prefixClassname("popup--right")]: placement === "right",
                    [prefixClassname("popup--bottom")]: placement === "bottom",
                    [prefixClassname("popup--left")]: placement === "left",
                }, className), style: {
                    ...durationStyle,
                    ...styleProp,
                }, catchMove: lock, ...restProps },
                close,
                content)),
        backdrop));
});
export default Popup;
