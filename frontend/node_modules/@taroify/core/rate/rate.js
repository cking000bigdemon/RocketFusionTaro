import { useUncontrolled } from "@taroify/hooks/index.js";
import { Star, StarOutlined } from "@taroify/icons/index.js";
import { View } from "@tarojs/components";
import classNames from "classnames";
import * as React from "react";
import { useCallback, useMemo, useRef } from "react";
import { prefixClassname } from "../styles/index.js";
import { getClientCoordinates, preventDefault } from "../utils/dom/event.js";
import { getRects } from "../utils/dom/rect.js";
import { useTouch } from "../utils/touch.js";
import RateItem from "./rate-item.js";
import RateContext from "./rate.context.js";
import { RateStatus } from "./rate.shared.js";
function getRateStatus(value, index, allowHalf, readonly) {
    if (value >= index) {
        return { status: RateStatus.Full, value: 1 };
    }
    if (value + 0.5 >= index && allowHalf && !readonly) {
        return { status: RateStatus.Half, value: 0.5 };
    }
    if (value + 1 >= index && allowHalf && readonly) {
        const cardinal = 10 ** 10;
        return {
            status: RateStatus.Half,
            value: Math.round((value - index + 1) * cardinal) / cardinal,
        };
    }
    return { status: RateStatus.Void, value: 0 };
}
function Rate(props) {
    const { className, defaultValue, value: valueProp, count = 5, size, gutter, allowHalf = false, readonly = false, disabled = false, touchable = true, icon = React.createElement(Star, null), emptyIcon = React.createElement(StarOutlined, null), onClick, onTouchStart, onTouchMove, onChange: onChangeProp, ...restProps } = props;
    const { value = 0, setValue } = useUncontrolled({
        value: valueProp,
        defaultValue,
        onChange: onChangeProp,
    });
    const rootRef = useRef();
    const untouchable = readonly || disabled || !touchable;
    const touch = useTouch();
    const getRanges = useCallback(() => getRects(rootRef, ` .${prefixClassname("rate__item")}`).then((rects) => rects.flatMap((rect, index) => allowHalf
        ? [
            { score: index + 0.5, left: rect.left },
            { score: index + 1, left: rect.left + rect.width / 2 },
        ]
        : [{ score: index + 1, left: rect.left }])), [allowHalf]);
    const getScoreByPosition = useCallback((x) => getRanges().then((ranges) => {
        for (let i = ranges.length - 1; i > 0; i--) {
            if (x > ranges[i].left) {
                return ranges[i].score;
            }
        }
        return allowHalf ? 0.5 : 1;
    }), [allowHalf, getRanges]);
    const onItemClick = useCallback((event) => {
        onClick?.(event);
        if (untouchable) {
            return;
        }
        const { clientX } = getClientCoordinates(event);
        getScoreByPosition(clientX).then((newValue) => {
            setValue(newValue);
        });
    }, [onClick, untouchable, getScoreByPosition, setValue]);
    const handleTouchStart = useCallback((event) => {
        if (untouchable) {
            return;
        }
        touch.start(event);
    }, [touch, untouchable]);
    const handleTouchMove = useCallback((event) => {
        if (untouchable) {
            return;
        }
        touch.move(event);
        if (touch.isHorizontal()) {
            preventDefault(event);
            onItemClick(event);
        }
    }, [untouchable, touch, onItemClick]);
    const renderStar = useCallback((item, index) => {
        const renderHalf = allowHalf && item.value > 0 && item.value < 1;
        return (React.createElement(RateItem, { key: index, score: index + 1, disabled: disabled, size: size, half: renderHalf, value: item.value, status: item.status }));
    }, [allowHalf, disabled, size]);
    const stars = useMemo(() => Array(count)
        .fill("")
        .map((__, i) => getRateStatus(value, i + 1, allowHalf, readonly))
        .map(renderStar), [allowHalf, count, readonly, renderStar, value]);
    return (React.createElement(View, { ref: rootRef, className: classNames(prefixClassname("rate"), {
            [prefixClassname("rate--disabled")]: disabled,
            [prefixClassname("rate--readonly")]: readonly,
        }, className), catchMove: true, onClick: onItemClick, onTouchStart: (event) => {
            handleTouchStart(event);
            onTouchStart?.(event);
        }, onTouchMove: (event) => {
            handleTouchMove(event);
            onTouchMove?.(event);
        }, ...restProps },
        React.createElement(RateContext.Provider, { value: {
                gutter,
                count,
                icon,
                emptyIcon,
            }, children: stars })));
}
export default Rate;
