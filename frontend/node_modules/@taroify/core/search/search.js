import { Search as SearchIcon } from "@taroify/icons/index.js";
import { View } from "@tarojs/components";
import classNames from "classnames";
import _isBoolean from "lodash/isBoolean";
import * as React from "react";
import Field from "../field/index.js";
import Input from "../input/index.js";
import { prefixClassname } from "../styles/index.js";
import { preventDefault } from "../utils/dom/event.js";
import { getLogger } from "../utils/logger.js";
const { deprecated } = getLogger("Search");
function Search(props) {
    const { className, value, icon = React.createElement(SearchIcon, null), rightIcon, label, shape, maxlength, autoFocus, focus, disabled, readonly, enableNative = true, placeholder, placeholderClassName, clearable = true, clearIcon, clearTrigger, inputAlign, inputColor, feedback, action, onClear, onCancel, onSearch, onChange, onFocus, onBlur, ...restProps } = props;
    if (shape === "round") {
        deprecated('Use the shape="rounded" prop instead of the shape="round" prop');
    }
    function handleSearch(event) {
        preventDefault(event);
        onSearch?.(event);
    }
    return (React.createElement(View, { className: classNames(prefixClassname("search"), {
            [prefixClassname("search--action")]: action,
        }, className), ...restProps },
        React.createElement(View, { className: classNames(prefixClassname("search__content"), {
                [prefixClassname("search__content--square")]: shape === "square",
                [prefixClassname("search__content--rounded")]: shape === "rounded" || shape === "round",
            }) },
            label && React.createElement(View, { className: prefixClassname("search__label"), children: label }),
            React.createElement(Field, { className: prefixClassname("search__field"), icon: icon, rightIcon: rightIcon, feedback: feedback },
                React.createElement(Input, { className: prefixClassname("search__input"), placeholderClassName: placeholderClassName, value: value, maxlength: maxlength, placeholder: placeholder, clearable: clearable, clearIcon: clearIcon, clearTrigger: clearTrigger, align: inputAlign, color: inputColor, autoFocus: autoFocus, focus: focus, disabled: disabled, readonly: readonly, confirmType: "search", enableNative: enableNative, onConfirm: handleSearch, onClear: onClear, onChange: onChange, onFocus: onFocus, onBlur: onBlur }))),
        action && (React.createElement(View, { className: prefixClassname("search__action"), children: _isBoolean(action) ? "取消" : action, onClick: _isBoolean(action) ? onCancel : undefined }))));
}
export default Search;
