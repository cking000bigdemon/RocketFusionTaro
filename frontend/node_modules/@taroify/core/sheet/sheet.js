import { View } from "@tarojs/components";
import classNames from "classnames";
import * as React from "react";
import { Children, isValidElement, useMemo, } from "react";
import Backdrop from "../backdrop/index.js";
import Popup from "../popup/index.js";
import { prefixClassname } from "../styles/index.js";
import { isElementOf } from "../utils/validate/index.js";
import SheetHeader from "./sheet-header.js";
import SheetContext from "./sheet.context.js";
function useSheetChildren(children) {
    return useMemo(() => {
        const __children__ = {
            backdrop: undefined,
            header: undefined,
            content: [],
        };
        Children.forEach(children, (child) => {
            if (isValidElement(child)) {
                const element = child;
                if (isElementOf(element, Backdrop)) {
                    __children__.backdrop = element;
                }
                else if (isElementOf(element, SheetHeader)) {
                    __children__.header = element;
                }
                else {
                    __children__.content.push(child);
                }
            }
            else {
                __children__.content.push(child);
            }
        });
        return __children__;
    }, [children]);
}
function SheetContent(props) {
    const { children } = props;
    return React.createElement(View, { className: prefixClassname("sheet__content"), children: children });
}
function Sheet(props) {
    const { className, defaultOpen, open, rounded = true, children, onSelect, onCancel, onClose, ...restProps } = props;
    const { backdrop, header, content } = useSheetChildren(children);
    return (React.createElement(SheetContext.Provider, { value: { onSelect, onCancel } },
        React.createElement(Popup, { className: classNames(prefixClassname("sheet"), className), placement: "bottom", rounded: rounded, defaultOpen: defaultOpen, open: open, onClose: onClose, ...restProps },
            backdrop,
            header,
            React.createElement(SheetContent, { children: content }))));
}
export default Sheet;
