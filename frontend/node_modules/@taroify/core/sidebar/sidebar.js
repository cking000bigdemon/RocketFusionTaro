import { useUncontrolled } from "@taroify/hooks/index.js";
import { View } from "@tarojs/components";
import classNames from "classnames";
import * as React from "react";
import { Children, cloneElement, isValidElement, useCallback, useMemo, } from "react";
import { prefixClassname } from "../styles/index.js";
import SidebarTab from "./sidebar-tab.js";
import SidebarContext from "./sidebar.context.js";
function useSidebarChildren(children) {
    return useMemo(() => Children.map(children, (node, index) => {
        if (!isValidElement(node)) {
            return node;
        }
        const element = node;
        if (element.type !== SidebarTab) {
            return element;
        }
        const { key, props } = element;
        const { value: oldValue, ...restProps } = props;
        const value = oldValue ?? index;
        return cloneElement(element, {
            key: key ?? value,
            value: value,
            ...restProps,
        });
    }), [children]);
}
function Sidebar(props) {
    const { className, defaultValue, value: valueProp, onChange, children: childrenProp, ...restProps } = props;
    const { value = 0, setValue } = useUncontrolled({ value: valueProp, defaultValue });
    const children = useSidebarChildren(childrenProp);
    const onTabClick = useCallback((tab) => {
        const { disabled, value } = tab;
        if (!disabled) {
            setValue(value);
            onChange?.(value, tab);
        }
    }, [onChange, setValue]);
    return (React.createElement(View, { className: classNames(prefixClassname("sidebar"), className), ...restProps },
        React.createElement(SidebarContext.Provider, { value: { value, onTabClick }, children: children })));
}
export default Sidebar;
