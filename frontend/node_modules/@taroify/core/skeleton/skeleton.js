import * as React from "react";
import { View } from "@tarojs/components";
import classNames from "classnames";
import { prefixClassname } from "../styles/index.js";
import { addUnitPx } from "../utils/format/unit.js";
import SkeletonAvatar from "./skeleton-avatar.js";
import SkeletonTitle from "./skeleton-title.js";
import SkeletonParagraph, { DEFAULT_ROW_WIDTH } from "./skeleton-paragraph.js";
const DEFAULT_LAST_ROW_WIDTH = "60%";
function Skeleton(props) {
    const { className, loading = true, round = true, animate = true, row = 0, rowWidth = DEFAULT_ROW_WIDTH, avatar, avatarSize, avatarShape = "round", title, titleWidth, children, template, ...restProps } = props;
    const getRowWidth = (index) => {
        const { rowWidth } = props;
        if (rowWidth === DEFAULT_ROW_WIDTH && index === +row - 1) {
            return DEFAULT_LAST_ROW_WIDTH;
        }
        if (Array.isArray(rowWidth)) {
            return rowWidth[index];
        }
        return rowWidth;
    };
    const renderContent = () => {
        if (template) {
            return template;
        }
        return (React.createElement(React.Fragment, null,
            avatar && React.createElement(SkeletonAvatar, { avatarSize: avatarSize, avatarShape: avatarShape }),
            React.createElement(View, { className: prefixClassname("skeleton__content") },
                title && React.createElement(SkeletonTitle, { round: round, titleWidth: titleWidth }),
                Array(+row)
                    .fill("")
                    .map((_, i) => (React.createElement(SkeletonParagraph, { key: i, round: round, rowWidth: addUnitPx(getRowWidth(i)) }))))));
    };
    if (!loading) {
        return children;
    }
    return (React.createElement(View, { className: classNames(prefixClassname("skeleton"), {
            [prefixClassname("skeleton--round")]: round,
            [prefixClassname("skeleton--animate")]: animate,
        }, className), ...restProps }, renderContent()));
}
export default Skeleton;
