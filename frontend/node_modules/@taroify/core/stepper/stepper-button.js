import { View } from "@tarojs/components";
import classNames from "classnames";
import * as React from "react";
import { useCallback, useContext, useRef } from "react";
import { prefixClassname } from "../styles/index.js";
import { preventDefault } from "../utils/dom/event.js";
import { getSizeStyle } from "../utils/format/unit.js";
import StepperContext from "./stepper.context.js";
const LONG_PRESS_INTERVAL = 200;
const LONG_PRESS_START_TIME = 600;
function StepperButton(props) {
    const { className, style, type = "decrease", disabled: disabledProp, onClick, onTouchStart, onTouchEnd, onTouchCancel, ...restProps } = props;
    const { value = 0, min = 0, max = 0, size, disabled: disabledCtx, longPress, onStep, } = useContext(StepperContext);
    const disabled = disabledProp ||
        disabledCtx ||
        (type === "decrease" && Number(value) <= min) ||
        (type === "increase" && Number(value) >= max);
    const longPressRef = useRef(false);
    const longPressTimerRef = useRef();
    const longPressStep = useCallback(() => {
        longPressTimerRef.current = setTimeout(() => {
            onStep?.(type);
            longPressStep();
        }, LONG_PRESS_INTERVAL);
    }, [onStep, type]);
    const handleTouchStart = useCallback(() => {
        if (longPress) {
            longPressRef.current = false;
            if (longPressTimerRef.current) {
                clearTimeout(longPressTimerRef.current);
            }
            longPressTimerRef.current = setTimeout(() => {
                longPressRef.current = true;
                onStep?.(type);
                longPressStep();
            }, LONG_PRESS_START_TIME);
        }
    }, [longPress, longPressStep, onStep, type]);
    const handleTouchEnd = useCallback((event) => {
        if (longPress) {
            if (longPressTimerRef.current) {
                clearTimeout(longPressTimerRef.current);
            }
            if (longPressRef.current) {
                preventDefault(event);
            }
        }
    }, [longPress]);
    return (React.createElement(View, { className: classNames(prefixClassname(`stepper__${type}`), {
            [prefixClassname(`stepper__${type}--disabled`)]: disabled,
        }, className), style: getSizeStyle(size), onClick: (event) => {
            preventDefault(event);
            onClick?.(event);
            if (!disabled) {
                onStep?.(type);
            }
        }, onTouchStart: (event) => {
            onTouchStart?.(event);
            if (!disabled) {
                handleTouchStart();
            }
        }, onTouchEnd: (event) => {
            onTouchEnd?.(event);
            handleTouchEnd(event);
        }, onTouchCancel: (event) => {
            onTouchCancel?.(event);
            handleTouchEnd(event);
        }, ...restProps }));
}
export default StepperButton;
