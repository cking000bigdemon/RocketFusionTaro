import { Input } from "@tarojs/components";
import * as React from "react";
import { useCallback, useContext, useEffect, useRef, useState } from "react";
import { prefixClassname } from "../styles/index.js";
import { preventDefault } from "../utils/dom/event.js";
import { formatNumber } from "../utils/format/number.js";
import { addUnitPx } from "../utils/format/unit.js";
import StepperContext from "./stepper.context.js";
function StepperInput(props) {
    const { width, disabled: disabledProp, cursor, onFocus } = props;
    const { value: valueProp, size, disabled, precision = 0, formatValue, onChange, } = useContext(StepperContext);
    const digit = precision > 0;
    const rootRef = useRef();
    const [value, setValue] = useState();
    useEffect(() => setValue(valueProp), [valueProp]);
    const onTouchEnd = useCallback((event) => {
        if (disabledProp) {
            preventDefault(event);
        }
    }, [disabledProp]);
    const handleFocus = useCallback((event) => {
        if (disabledProp) {
            rootRef.current?.blur();
        }
        else {
            onFocus?.(event);
        }
    }, [disabledProp, onFocus]);
    const onInput = useCallback(({ detail }) => {
        const { value: inputValue } = detail;
        let formatted = formatNumber(String(inputValue), digit);
        if (precision > 0 && formatted.includes(".")) {
            const pair = formatted.split(".");
            formatted = `${pair[0]}.${pair[1].slice(0, precision)}`;
        }
        const isNumeric = formatted === String(+formatted);
        setValue(isNumeric ? +formatted : formatted);
    }, [digit, precision]);
    const onBlur = useCallback(({ detail }) => {
        const { value: inputValue } = detail;
        const value = formatValue?.(inputValue);
        setValue(value);
        onChange?.(value);
    }, [formatValue, onChange]);
    return (React.createElement(Input, { ref: rootRef, className: prefixClassname("stepper__input"), style: {
            width: width ? addUnitPx(width) : "",
            height: size ? addUnitPx(size) : "",
        }, disabled: disabledProp || disabled, type: digit ? "digit" : "number", cursor: cursor, value: value, onTouchEnd: onTouchEnd, onFocus: handleFocus, onInput: onInput, onBlur: onBlur }));
}
export default StepperInput;
