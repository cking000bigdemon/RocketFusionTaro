import { useUncontrolled } from "@taroify/hooks/index.js";
import { View } from "@tarojs/components";
import classNames from "classnames";
import * as React from "react";
import { Children, cloneElement, isValidElement, useCallback, useMemo, } from "react";
import { prefixClassname } from "../styles/index.js";
import { addNumber, formatNumber } from "../utils/format/number.js";
import { getLogger } from "../utils/logger.js";
import { useToRef } from "../utils/state.js";
import StepperButton from "./stepper-button.js";
import StepperInput from "./stepper-input.js";
import StepperContext from "./stepper.context.js";
const { deprecated } = getLogger("Stepper");
function useStepperChildren(children) {
    return useMemo(() => {
        const __children__ = {};
        Children.forEach(children, (child) => {
            if (!isValidElement(child)) {
                return;
            }
            const element = child;
            const elementType = element.type;
            if (elementType === StepperButton) {
                if (__children__.decrease === undefined) {
                    __children__.decrease = cloneElement(element, {
                        type: "decrease",
                    });
                }
                else if (__children__.increase === undefined) {
                    __children__.increase = cloneElement(element, {
                        type: "increase",
                    });
                }
            }
            else if (elementType === StepperInput) {
                __children__.input = element;
            }
        });
        if (!children) {
            const element = React.createElement(StepperButton, null);
            if (__children__.decrease === undefined) {
                __children__.decrease = cloneElement(element, { type: "decrease" });
            }
            if (__children__.input === undefined) {
                __children__.input = React.createElement(StepperInput, null);
            }
            if (__children__.increase === undefined) {
                __children__.increase = cloneElement(element, { type: "increase" });
            }
        }
        return __children__;
    }, [children]);
}
function Stepper(props) {
    const { className, defaultValue, value: valueProp, min = 1, max = Number.MAX_VALUE, step = 1, size, disabled, precision = 0, longPress = true, shape = "rounded", children: childrenProp, onChange: onChangeProp, ...restProps } = props;
    if (shape === "round") {
        deprecated('Use the shape="circular" prop instead of the shape="round" prop');
    }
    const { decrease, input, increase } = useStepperChildren(childrenProp);
    const { value = 0, setValue } = useUncontrolled({
        value: valueProp,
        defaultValue,
        onChange: onChangeProp,
    });
    const formatValue = useCallback((value) => {
        if (value === "") {
            return value;
        }
        let valueCache = value;
        valueCache = formatNumber(String(valueCache), precision > 0);
        valueCache = valueCache === "" ? 0 : +valueCache;
        valueCache = Number.isNaN(valueCache) ? +min : valueCache;
        valueCache = Math.max(Math.min(+max, valueCache), +min);
        if (precision > 0) {
            valueCache = valueCache.toFixed(+precision);
        }
        return valueCache;
    }, [max, min, precision]);
    const valueRef = useToRef(formatValue(value));
    const onStep = useCallback((actionType) => {
        const diff = actionType === "decrease" ? -step : +step;
        setValue(formatValue(addNumber(valueRef.current, diff)));
    }, [formatValue, setValue, step, valueRef]);
    return (React.createElement(StepperContext.Provider, { value: {
            value: valueRef.current,
            min,
            max,
            size,
            disabled,
            precision,
            longPress,
            formatValue,
            onChange: setValue,
            onStep,
        } },
        React.createElement(View, { className: classNames(prefixClassname("stepper"), {
                [prefixClassname("stepper--square")]: shape === "square",
                [prefixClassname("stepper--rounded")]: shape === "rounded",
                [prefixClassname("stepper--circular")]: shape === "circular" || shape === "round",
            }, className), ...restProps },
            decrease,
            input,
            increase)));
}
export default Stepper;
