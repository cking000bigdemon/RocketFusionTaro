import { cloneIconElement } from "@taroify/icons/utils/index.js";
import { View } from "@tarojs/components";
import classNames from "classnames";
import * as React from "react";
import { useContext, useMemo } from "react";
import { prefixClassname } from "../styles/index.js";
import { HAIRLINE_BORDER } from "../styles/hairline.js";
import StepsContext from "./steps.context.js";
function Step(props) {
    const { className, index = -1, active: activeProp = false, completed: completedProp = false, icon, label, children, ...restProps } = props;
    const { value = -1, direction, alternativeLabel } = useContext(StepsContext);
    const active = useMemo(() => activeProp || index === value, [activeProp, index, value]);
    const completed = useMemo(() => completedProp || index < value, [completedProp, index, value]);
    return (React.createElement(View, { className: classNames(HAIRLINE_BORDER, prefixClassname("step"), prefixClassname(`step--${direction}`), {
            [prefixClassname("step--alternative-label")]: alternativeLabel && direction === "horizontal",
            [prefixClassname("step--active")]: active,
            [prefixClassname("step--completed")]: completed,
        }, className), ...restProps },
        React.createElement(View, { className: classNames(prefixClassname("step__label")), children: children ?? label }),
        React.createElement(View, { className: prefixClassname("step__circle-container") }, icon ? (cloneIconElement(icon, { className: prefixClassname("step__icon") })) : (React.createElement(View, { className: prefixClassname("step__circle") }))),
        React.createElement(View, { className: classNames(prefixClassname("step__line")) })));
}
export default Step;
