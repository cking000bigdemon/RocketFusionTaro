import { useUncontrolled } from "@taroify/hooks/index.js";
import { View } from "@tarojs/components";
import classNames from "classnames";
import * as React from "react";
import { Children, cloneElement, isValidElement, } from "react";
import { prefixClassname } from "../styles/index.js";
import Step from "./step.js";
import StepsContext from "./steps.context.js";
function useStepsChildren(children) {
    const __children__ = {
        steps: [],
    };
    let index = 0;
    Children.forEach(children, (child, i) => {
        if (!isValidElement(child)) {
            return;
        }
        const element = child;
        const elementType = element.type;
        if (elementType === Step) {
            const { key } = element;
            __children__.steps.push(cloneElement(child, {
                ...element.props,
                key: key ?? i,
                index: index++,
            }));
        }
    });
    return __children__;
}
function Steps(props) {
    const { className, defaultValue, value: valueProp, direction = "horizontal", alternativeLabel = false, children: childrenProp, ...restProps } = props;
    const { value } = useUncontrolled({ value: valueProp, defaultValue });
    const { steps } = useStepsChildren(childrenProp);
    return (React.createElement(StepsContext.Provider, { value: {
            value,
            direction,
            alternativeLabel,
        } },
        React.createElement(View, { className: classNames(prefixClassname("steps"), {
                [prefixClassname("steps--horizontal")]: direction === "horizontal",
                [prefixClassname("steps--vertical")]: direction === "vertical",
            }, className), ...restProps },
            React.createElement(View, { className: prefixClassname("steps__items"), children: steps }))));
}
export default Steps;
