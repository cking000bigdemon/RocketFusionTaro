import { View } from "@tarojs/components";
import classNames from "classnames";
import * as React from "react";
import { useContext, useEffect, useMemo, useRef, useState, } from "react";
import { useMounted } from "../hooks/index.js";
import { prefixClassname } from "../styles/index.js";
import { addUnitPx } from "../utils/format/unit.js";
import { useRendered } from "../utils/state.js";
import SwiperContext from "./swiper.context.js";
export default function SwiperItem(props) {
    const { __dataIndex__ = 0, className, style: styleProp, children: childrenProp, ...restProps } = props;
    const { lazyRender, getSize, direction, loop, indicator = 0, count = 0, itemInstances, } = useContext(SwiperContext);
    const vertical = direction === "vertical";
    const initializedRef = useRef(false);
    const mountedRef = useRef(false);
    const [offset, setOffset] = useState(0);
    const shouldRender = useMemo(() => {
        if (!lazyRender || initializedRef.current) {
            return true;
        }
        if (!mountedRef.current && indicator !== 0) {
            return false;
        }
        const active = indicator;
        const maxActive = count - 1;
        const prevActive = active === 0 && loop ? maxActive : active - 1;
        const nextActive = active === maxActive && loop ? 0 : active + 1;
        initializedRef.current =
            __dataIndex__ === active || __dataIndex__ === prevActive || __dataIndex__ === nextActive;
        return initializedRef.current;
    }, [__dataIndex__, count, indicator, lazyRender, loop]);
    useMounted(() => {
        mountedRef.current = true;
    });
    useEffect(() => {
        if (!itemInstances[__dataIndex__]) {
            itemInstances[__dataIndex__] = { setOffset };
        }
    }, [itemInstances, __dataIndex__]);
    const rootStyle = useRendered(() => {
        const style = {};
        const size = getSize?.();
        if (size) {
            const mainAxis = vertical ? "height" : "width";
            style[mainAxis] = addUnitPx(size);
        }
        style.transform = offset ? `translate${vertical ? "Y" : "X"}(${addUnitPx(offset)})` : "";
        return style;
    });
    return (React.createElement(View, { className: classNames(prefixClassname("swiper-item"), className), style: {
            ...styleProp,
            ...rootStyle,
        }, children: shouldRender ? childrenProp : undefined, ...restProps }));
}
