import { useUncontrolled } from "@taroify/hooks/index.js";
import { View } from "@tarojs/components";
import classNames from "classnames";
import * as React from "react";
import { Children, cloneElement, isValidElement, useMemo, } from "react";
import FixedView from "../fixed-view/index.js";
import { prefixClassname } from "../styles/index.js";
import { HAIRLINE_BORDER_TOP_BOTTOM } from "../styles/hairline.js";
import TabbarItem from "./tabbar-item.js";
import TabbarContext from "./tabbar.context.js";
function useTabbarChildren(children) {
    return useMemo(() => Children.map(children, (node, index) => {
        if (!isValidElement(node)) {
            return node;
        }
        const element = node;
        if (element.type !== TabbarItem) {
            return element;
        }
        const { props } = element;
        return cloneElement(element, {
            value: element.key ?? index,
            ...props,
        });
    }), [children]);
}
function Tabbar(props) {
    const { className, defaultValue, value: valueProp, bordered, fixed, placeholder = true, safeArea, children: childrenProp, onChange: onChangeProp, ...restProps } = props;
    const { value = 0, setValue } = useUncontrolled({
        value: valueProp,
        defaultValue,
        onChange: onChangeProp,
    });
    const children = useTabbarChildren(childrenProp);
    function onItemClick(dataKey) {
        if (dataKey !== value) {
            setValue(dataKey);
        }
    }
    return (React.createElement(TabbarContext.Provider, { value: {
            value,
            onItemClick,
        } },
        React.createElement(FixedView, { position: fixed, safeArea: safeArea, placeholder: fixed && placeholder && prefixClassname("tabbar__placeholder") },
            React.createElement(View, { className: classNames(prefixClassname("tabbar"), {
                    [HAIRLINE_BORDER_TOP_BOTTOM]: bordered,
                }, className), children: children, ...restProps }))));
}
export default Tabbar;
