import { View } from "@tarojs/components";
import classNames from "classnames";
import * as React from "react";
import { useContext, useMemo, useRef } from "react";
import { prefixClassname } from "../styles/index.js";
import Swiper from "../swiper/index.js";
import TabsContext from "./tabs.context.js";
export default function TabPaneBase(props) {
    const { className, style, index, value, children, title, ...restProps } = props;
    const { value: activeValue, lazyRender, animated, swipeable } = useContext(TabsContext);
    const active = activeValue === value;
    const initializedRef = useRef(false);
    const shouldRender = useMemo(() => {
        if (!lazyRender) {
            return true;
        }
        if (initializedRef.current) {
            return true;
        }
        if (active && !initializedRef.current) {
            initializedRef.current = true;
        }
        return active;
    }, [active, lazyRender]);
    const tabPane = (React.createElement(View, { style: {
            ...style,
            display: !(animated || swipeable) && !active ? "none" : "",
        }, className: classNames(prefixClassname("tabs__tab-pane"), className), children: shouldRender ? children : undefined, ...restProps }));
    if (animated || swipeable) {
        return (React.createElement(Swiper.Item, { className: classNames(prefixClassname("tabs__tab-pane-wrapper"), {
                [prefixClassname("tabs__tab-pane-wrapper--inactive")]: !active,
            }), children: tabPane }));
    }
    return tabPane;
}
