import { View } from "@tarojs/components";
import classNames from "classnames";
import _map from "lodash/map";
import _find from "lodash/find";
import _get from "lodash/get";
import * as React from "react";
import { useMemo } from "react";
import { prefixClassname } from "../styles/index.js";
import Swiper from "../swiper/index.js";
import { useRendered } from "../utils/state.js";
import TabPaneBase from "./tab-pane-base.js";
function useTabPanes(tabObjects) {
    return useMemo(() => _map(tabObjects, (props) => React.createElement(TabPaneBase, { ...props })), [tabObjects]);
}
export function TabsContent(props) {
    const { value: activeValue, duration, animated, swipeable, tabObjects, onTabChange } = props;
    const activeIndex = useMemo(() => _find(tabObjects, (tab) => tab.value === activeValue)?.index, [activeValue, tabObjects]);
    const panes = useTabPanes(tabObjects);
    function onSwiperChange(index) {
        const tabObject = _get(tabObjects, index);
        if (tabObject) {
            const { value, title, disabled } = tabObject;
            if (!disabled) {
                onTabChange?.({ value, title, disabled });
            }
        }
    }
    const childrenRender = useRendered(() => {
        if (animated || swipeable) {
            return (React.createElement(Swiper, { value: activeIndex, loop: false, className: prefixClassname("tabs__track"), duration: duration, touchable: swipeable, children: panes, stopPropagation: false, onChange: onSwiperChange }));
        }
        return panes;
    });
    return (React.createElement(View, { className: classNames(prefixClassname("tabs__content"), {
            [prefixClassname("tabs__content--animated")]: animated,
        }), children: childrenRender }));
}
