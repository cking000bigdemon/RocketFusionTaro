import { ScrollView, View } from "@tarojs/components";
import { nextTick, offWindowResize, onWindowResize } from "@tarojs/taro";
import classNames from "classnames";
import _findIndex from "lodash/findIndex";
import _isEmpty from "lodash/isEmpty";
import _size from "lodash/size";
import _map from "lodash/map";
import * as React from "react";
import { useCallback, useEffect, useMemo, useRef, useState } from "react";
import { prefixClassname } from "../styles/index.js";
import { HAIRLINE_BORDER_TOP_BOTTOM } from "../styles/hairline.js";
import { getRect, getRects } from "../utils/dom/rect.js";
import Tab from "./tab.js";
export default function TabsHeader(props) {
    const { value: activeValue, theme, ellipsis, bordered, shrink, tabObjects, swipeThreshold, onTabClick, } = props;
    const themeLine = theme === "line";
    const themeCard = theme === "card";
    const navRef = useRef();
    const [navOffset, setNavOffset] = useState({});
    const [tabOffsets, setTabOffsets] = useState([]);
    const activeIndex = useMemo(() => _findIndex(tabObjects, (tab) => tab.value === activeValue), [tabObjects, activeValue]);
    const activeOffset = useMemo(() => {
        if (_isEmpty(tabOffsets) || activeIndex === -1 || activeIndex >= _size(tabOffsets)) {
            return {};
        }
        const { width } = tabOffsets[activeIndex];
        const left = tabOffsets
            .slice(0, activeIndex)
            .reduce((prev, curr) => prev + (curr.width ?? 0), 0);
        return {
            left,
            width,
        };
    }, [tabOffsets, activeIndex]);
    const scrollLeft = useMemo(() => {
        if (navOffset) {
            const { width: navOffsetWidth = 0 } = navOffset;
            const { left: offsetLeft = 0, width: offsetWidth = 0 } = activeOffset;
            return offsetLeft - (navOffsetWidth - offsetWidth) / 2;
        }
        return 0;
    }, [navOffset, activeOffset]);
    const resize = useCallback(() => {
        Promise.all([getRect(navRef), getRects(navRef, ` .${prefixClassname("tabs__tab")}`)]).then(([navRect, tabRects]) => {
            setNavOffset(navRect);
            setTabOffsets(tabRects);
        });
    }, []);
    const flexBasis = useMemo(() => {
        if (shrink)
            return "";
        return ellipsis && themeLine ? `${88 / swipeThreshold}%` : "";
    }, [ellipsis, themeLine, swipeThreshold, shrink]);
    useEffect(() => nextTick(resize), [resize, tabObjects]);
    useEffect(() => {
        onWindowResize?.(resize);
        return () => offWindowResize?.(resize);
    }, [resize]);
    return (React.createElement(View, { className: classNames(prefixClassname("tabs__wrap"), prefixClassname("tabs__wrap--scrollable"), {
            [HAIRLINE_BORDER_TOP_BOTTOM]: bordered && themeLine,
        }) },
        React.createElement(ScrollView, { enhanced: true, showScrollbar: false, scrollX: tabObjects.length > swipeThreshold || !ellipsis, scrollWithAnimation: true, scrollLeft: scrollLeft, className: classNames(prefixClassname("tabs__wrap__scroll"), {
                [prefixClassname("tabs__wrap__scroll--line")]: themeLine,
                [prefixClassname("tabs__wrap__scroll--card")]: themeCard,
                [prefixClassname("tabs__wrap__scroll--shrink")]: shrink && themeCard,
            }) },
            React.createElement(View, { ref: navRef, className: classNames(prefixClassname("tabs__nav"), {
                    [prefixClassname("tabs__nav--line")]: themeLine,
                    [prefixClassname("tabs__nav--card")]: themeCard,
                }) }, _map(tabObjects, (tabObject) => (React.createElement(Tab, { key: tabObject.key, flexBasis: flexBasis, className: classNames(tabObject?.classNames?.title, {
                    [prefixClassname("tabs__tab--shrink")]: shrink,
                }), dot: tabObject.dot, badge: tabObject.badge, active: activeValue === tabObject.value, disabled: tabObject.disabled, underline: themeLine, ellipsis: themeLine && ellipsis, children: tabObject.title, onClick: () => onTabClick?.({
                    value: tabObject.value,
                    title: tabObject.title,
                    disabled: tabObject.disabled,
                }) })))))));
}
