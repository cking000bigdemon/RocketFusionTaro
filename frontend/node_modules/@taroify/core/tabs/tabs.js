import { useUncontrolled } from "@taroify/hooks/index.js";
import { View } from "@tarojs/components";
import classNames from "classnames";
import _size from "lodash/size";
import _isBoolean from "lodash/isBoolean";
import * as React from "react";
import { Children, isValidElement, useCallback, useMemo, useRef, } from "react";
import Sticky from "../sticky/index.js";
import { prefixClassname } from "../styles/index.js";
import TabPane from "./tab-pane.js";
import { TabsContent } from "./tabs-content.js";
import TabsHeader from "./tabs-header.js";
import TabsContext from "./tabs.context.js";
function useTabObjects(children) {
    return useMemo(() => {
        const tabObjects = [];
        Children.forEach(children, (node) => {
            if (!isValidElement(node)) {
                return node;
            }
            const element = node;
            if (element.type !== TabPane) {
                return element;
            }
            const { key, props } = element;
            const index = _size(tabObjects);
            const { value, ...restProps } = props;
            tabObjects.push({
                key: key ?? index,
                index,
                value: value ?? index,
                ...restProps,
            });
        });
        return tabObjects;
    }, [children]);
}
function useTabsSticky(sticky) {
    if (sticky === false) {
        return undefined;
    }
    if (_isBoolean(sticky) && sticky) {
        return {
            offsetTop: 0,
        };
    }
    return sticky;
}
function Tabs(props) {
    const { className, defaultValue, value: valueProp, duration = 300, lazyRender = true, animated = false, swipeable = false, sticky = false, theme = "line", ellipsis = true, bordered, swipeThreshold = 5, children: childrenProp, shrink, onTabClick, onChange, onScroll, ...restProps } = props;
    const { value = 0, getValue, setValue, } = useUncontrolled({
        defaultValue,
        value: valueProp,
    });
    const rootRef = useRef();
    const stickyProps = useTabsSticky(sticky);
    const tabObjects = useTabObjects(childrenProp);
    const index = useMemo(() => {
        for (const tab of tabObjects) {
            if (tab.value === value) {
                return tab.index;
            }
        }
    }, [tabObjects, value]);
    const onTabChange = useCallback((event) => {
        if (!event.disabled) {
            if (getValue() !== event.value) {
                onChange?.(event.value, event);
                setValue(event.value);
            }
        }
    }, [getValue, onChange, setValue]);
    const handleTabClick = useCallback((event) => {
        onTabClick?.(event);
        onTabChange(event);
    }, [onTabChange, onTabClick]);
    const headerRender = useMemo(() => (React.createElement(TabsHeader, { value: value, theme: theme, bordered: bordered, ellipsis: ellipsis, shrink: shrink, tabObjects: tabObjects, swipeThreshold: swipeThreshold, onTabClick: handleTabClick })), [bordered, ellipsis, handleTabClick, tabObjects, theme, value, swipeThreshold]);
    return (React.createElement(TabsContext.Provider, { value: {
            index,
            value,
            duration,
            lazyRender,
            animated,
            swipeable,
            theme,
            ellipsis,
            bordered,
            tabObjects,
            swipeThreshold,
        } },
        React.createElement(View, { ref: rootRef, className: classNames(prefixClassname("tabs"), {
                [prefixClassname("tabs--line")]: theme === "line",
                [prefixClassname("tabs--card")]: theme === "card",
            }, className), ...restProps },
            stickyProps ? (React.createElement(Sticky, { container: rootRef, offsetTop: stickyProps.offsetTop, children: headerRender, onScroll: onScroll })) : (headerRender),
            React.createElement(TabsContent, { value: value, lazyRender: lazyRender, duration: duration, animated: animated, swipeable: swipeable, tabObjects: tabObjects, onTabChange: onTabChange }))));
}
export default Tabs;
