import classNames from "classnames";
import _isObject from "lodash/isObject";
import * as React from "react";
import { Children, isValidElement, useContext, } from "react";
import { prefixClassname } from "../styles/index.js";
import { isElementOf } from "../utils/validate/index.js";
import TimelineConnector from "./timeline-connector.js";
import TimelineContent from "./timeline-content.js";
import TimelineDot from "./timeline-dot.js";
import TimelineItemBase from "./timeline-item-base.js";
import TimelineSeparator from "./timeline-separator.js";
import TimelineContext from "./timeline.context.js";
function useTimelineItemChildren(children, options) {
    const { position, dot } = options;
    const separator = [false, undefined];
    const leftContent = [false, undefined];
    const rightContent = [false, undefined];
    Children.forEach(children, (child) => {
        if (isElementOf(child, TimelineSeparator)) {
            separator[0] = true;
            separator[1] = child;
        }
        if (leftContent[0] && isElementOf(child, TimelineContent)) {
            rightContent[0] = true;
            rightContent[1] = child;
        }
        if (!leftContent[0] && isElementOf(child, TimelineContent)) {
            leftContent[0] = true;
            leftContent[1] = child;
        }
    });
    if (!leftContent[0] && !rightContent[0]) {
        leftContent[0] = true;
        leftContent[1] = React.createElement(TimelineContent, { children: children });
    }
    if (!separator[0]) {
        separator[0] = true;
        separator[1] = (React.createElement(TimelineSeparator, null,
            dot,
            React.createElement(TimelineConnector, null)));
    }
    if (position === "left") {
        return (React.createElement(React.Fragment, null,
            leftContent[1],
            separator[1]));
    }
    if (position === "right") {
        return (React.createElement(React.Fragment, null,
            separator[1],
            leftContent[1]));
    }
    if (!rightContent[0]) {
        rightContent[0] = true;
        rightContent[1] = React.createElement(TimelineContent, null);
    }
    return (React.createElement(React.Fragment, null,
        leftContent[1],
        separator[1],
        rightContent[1]));
}
function useTimelineDot(dot) {
    if (isValidElement(dot)) {
        return dot;
    }
    if (_isObject(dot)) {
        const dotProps = dot;
        return React.createElement(TimelineDot, { ...dotProps });
    }
}
function TimelineItem(props) {
    const { className, dot: dotProp = React.createElement(TimelineDot, null), children: childrenProp, ...restProps } = props;
    const { position } = useContext(TimelineContext);
    const dot = useTimelineDot(dotProp);
    const children = useTimelineItemChildren(childrenProp, { position, dot });
    return (React.createElement(TimelineItemBase, { className: classNames(className, {
            [prefixClassname("timeline-item--right")]: position === "right",
            [prefixClassname("timeline-item--left")]: position === "left",
            [prefixClassname("timeline-item--alternate")]: position === "alternate",
            [prefixClassname("timeline-item--alternate-reverse")]: position === "alternate-reverse",
        }), ...restProps }, children));
}
export default TimelineItem;
