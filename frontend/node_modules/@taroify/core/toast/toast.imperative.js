import _assign from "lodash/assign";
import _isPlainObject from "lodash/isPlainObject";
import { createElement, isValidElement } from "react";
import { document } from "@tarojs/runtime";
import { mountPortal, unmountPortal, getPagePath } from "../utils/dom/portal.js";
import { toastEvents, toastSelectorSet } from "./toast.shared.js";
import Toast from "./toast.js";
let _isMultipleAllowed = false;
const initialToastOptions = {
    className: undefined,
    style: undefined,
    backdrop: undefined,
    type: undefined,
    position: undefined,
    icon: undefined,
    duration: undefined,
    message: undefined,
};
const DEFAULT_TOAST_SELECTOR = "#toast";
const DEFAULT_TOAST_SELECTOR_CREATE = "toast";
const defaultToastOptions = {};
resetDefaultToastOptions();
export function setDefaultToastOptions(options) {
    _assign(defaultToastOptions, options);
}
export function resetDefaultToastOptions() {
    _assign(defaultToastOptions, {
        selector: DEFAULT_TOAST_SELECTOR,
    });
}
function parseToastOptions(message) {
    const options = !isValidElement(message) && _isPlainObject(message) ? message : { message };
    return _assign({}, initialToastOptions, defaultToastOptions, options);
}
export function allowMultiple(allow) {
    _isMultipleAllowed = allow;
}
export function openToast(args) {
    const { selector, ...restOptions } = parseToastOptions(args);
    const hasExistingToast = selector && toastSelectorSet.has(`${getPagePath()}__${selector}`);
    if ((_isMultipleAllowed && !hasExistingToast) || (!_isMultipleAllowed && !hasExistingToast)) {
        const toastView = document.createElement("view");
        const onTransitionExited = restOptions.onTransitionExited;
        restOptions.onTransitionExited = () => {
            onTransitionExited?.();
            unmountPortal(toastView);
        };
        const selectorId = selector === DEFAULT_TOAST_SELECTOR ? DEFAULT_TOAST_SELECTOR_CREATE : selector;
        const uniqueId = _isMultipleAllowed ? `${selectorId}-${Date.now()}` : selectorId;
        mountPortal(createElement(Toast, {
            ...restOptions,
            children: restOptions.message,
            defaultOpen: true,
            id: uniqueId,
        }), toastView);
        return uniqueId;
    }
    toastEvents.trigger("open", {
        selector,
        ...restOptions,
    });
    return selector;
}
export function createToast(type) {
    return (args) => {
        const options = parseToastOptions(args);
        options.type = type;
        return openToast(options);
    };
}
export function closeToast(selector) {
    if (selector) {
        const selectorWithPrefix = selector.startsWith("#") ? selector : `#${selector}`;
        toastEvents.trigger("close", selectorWithPrefix);
    }
    else {
        toastEvents.trigger("close", defaultToastOptions.selector);
    }
}
