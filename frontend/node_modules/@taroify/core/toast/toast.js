import { useUncontrolled } from "@taroify/hooks/index.js";
import { Fail, Success } from "@taroify/icons/index.js";
import { View } from "@tarojs/components";
import classNames from "classnames";
import * as React from "react";
import { Children, cloneElement, isValidElement, useEffect, useMemo, } from "react";
import Backdrop from "../backdrop/index.js";
import { useTimeout } from "../hooks/index.js";
import Loading from "../loading/index.js";
import Popup, { usePopupBackdrop } from "../popup/index.js";
import { prefixClassname } from "../styles/index.js";
import { getElementSelector, matchSelector, prependPageSelector, usePrependPageSelector, } from "../utils/dom/element.js";
import { useObject, useToRef } from "../utils/state.js";
import { isElementOf } from "../utils/validate/index.js";
import { toastEvents, toastSelectorSet, } from "./toast.shared.js";
const TOAST_PRESET_TYPES = ["text", "loading", "success", "fail", "html"];
const TOAST_PRESET_POSITIONS = ["top", "middle", "bottom"];
function useToastOpen(cb) {
    useEffect(() => {
        toastEvents.on("open", cb);
        return () => {
            toastEvents.off("open", cb);
        };
    }, []);
}
function useToastClose(cb) {
    useEffect(() => {
        toastEvents.on("close", cb);
        return () => {
            toastEvents.off("close", cb);
        };
    }, []);
}
function defaultToastIcon(icon, type) {
    if (icon) {
        return icon;
    }
    if (type === "success") {
        return React.createElement(Success, null);
    }
    if (type === "loading") {
        return React.createElement(Loading, { className: prefixClassname("toast__loading") });
    }
    if (type === "fail") {
        return React.createElement(Fail, null);
    }
    return undefined;
}
function useToastIcon(node, type) {
    return useMemo(() => {
        const icon = defaultToastIcon(node, type);
        if (!isValidElement(icon)) {
            return icon;
        }
        const element = icon;
        return cloneElement(icon, {
            className: classNames(prefixClassname("toast__icon"), element.props.className),
        });
    }, [node, type]);
}
function useToastChildren(children) {
    return useMemo(() => {
        const __children__ = {
            content: [],
        };
        Children.forEach(children, (child) => {
            if (isValidElement(child)) {
                const element = child;
                if (isElementOf(element, Backdrop)) {
                    __children__.backdrop = element;
                }
                else {
                    __children__.content?.push(child);
                }
            }
            else {
                __children__.content?.push(child);
            }
        });
        if (!__children__.backdrop) {
            __children__.backdrop = React.createElement(Popup.Backdrop, { open: false });
        }
        return __children__;
    }, [children]);
}
export default function Toast(props) {
    const { object: { id, className, defaultOpen, open: openProp, icon: iconProp, type = "text", position = "middle", duration = 3000, children: childrenProp, backdrop: backdropOptions, onClose, ...restProps }, setObject, } = useObject(props);
    const rootSelectorRef = useToRef(usePrependPageSelector(getElementSelector(id)));
    const { value: open = false, setValue: setOpen } = useUncontrolled({
        defaultValue: defaultOpen,
        value: openProp,
        onChange: (aOpened) => !aOpened && onClose?.(aOpened),
    });
    const { backdrop: backdropElement, content } = useToastChildren(childrenProp);
    const backdrop = usePopupBackdrop(backdropElement, backdropOptions);
    const icon = useToastIcon(iconProp, type);
    const { stop: stopAutoClose, restart: restartAutoClose } = useTimeout();
    useEffect(() => {
        rootSelectorRef.current && toastSelectorSet.add(rootSelectorRef.current);
        return () => {
            rootSelectorRef.current && toastSelectorSet.delete(rootSelectorRef.current);
        };
    }, []);
    useEffect(() => {
        if (open) {
            if (duration) {
                restartAutoClose(() => {
                    setOpen(false);
                    stopAutoClose();
                }, duration);
            }
        }
        else {
            stopAutoClose();
        }
        return () => stopAutoClose();
    }, [duration, open, restartAutoClose, setObject, setOpen, stopAutoClose]);
    useToastOpen(({ selector, message, ...restOptions }) => {
        if (matchSelector(prependPageSelector(selector), rootSelectorRef.current)) {
            restartAutoClose();
            setObject({
                children: message,
                ...restOptions,
            });
            setOpen(true);
        }
    });
    useToastClose((selector) => {
        if (matchSelector(prependPageSelector(selector), rootSelectorRef.current)) {
            setOpen(false);
        }
    });
    return (React.createElement(Popup, { open: open, id: id, className: classNames(prefixClassname("toast"), {
            [prefixClassname(`toast--${position}`)]: TOAST_PRESET_POSITIONS.includes(position),
            [prefixClassname(`toast--${type}`)]: !icon && TOAST_PRESET_TYPES.includes(type),
        }, className), ...restProps },
        backdrop,
        icon,
        icon ? React.createElement(View, { className: prefixClassname("toast__message"), children: content }) : content));
}
