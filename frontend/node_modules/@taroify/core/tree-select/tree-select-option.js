import { cloneIconElement } from "@taroify/icons/utils/index.js";
import { View } from "@tarojs/components";
import classNames from "classnames";
import _isArray from "lodash/isArray";
import _includes from "lodash/includes";
import * as React from "react";
import { useCallback, useContext, useMemo } from "react";
import { prefixClassname } from "../styles/index.js";
import TreeSelectContext from "./tree-select.context.js";
function TreeSelectOption(props) {
    const { className, style, disabled = false, value, children, onClick, ...restProps } = props;
    const { activeIcon, value: ctxValue, onOptionClick } = useContext(TreeSelectContext);
    const active = useMemo(() => (_isArray(ctxValue) ? _includes(ctxValue, value) : value === ctxValue), [ctxValue, value]);
    const handleClick = useCallback((event) => {
        onClick?.(event);
        onOptionClick?.({
            active: !active,
            disabled,
            value,
            children,
        });
    }, [active, children, disabled, onClick, onOptionClick, value]);
    return (React.createElement(View, { className: classNames(prefixClassname("ellipsis"), prefixClassname("tree-select-option"), {
            [prefixClassname("tree-select-option--disabled")]: disabled,
            [prefixClassname("tree-select-option--active")]: active,
        }, className), style: style, onClick: handleClick, ...restProps },
        children,
        active &&
            cloneIconElement(activeIcon, {
                className: prefixClassname("tree-select-option__icon"),
            })));
}
export default TreeSelectOption;
