import { useUncontrolled } from "@taroify/hooks/index.js";
import { Success } from "@taroify/icons/index.js";
import { View } from "@tarojs/components";
import classNames from "classnames";
import _isArray from "lodash/isArray";
import * as React from "react";
import { Children, cloneElement, isValidElement, useCallback, } from "react";
import Sidebar from "../sidebar/index.js";
import { prefixClassname } from "../styles/index.js";
import TreeSelectOption from "./tree-select-option.js";
import TreeSelectTab from "./tree-select-tab.js";
import TreeSelectContext from "./tree-select.context.js";
function getTreeSelectOptions(children) {
    const options = [];
    Children.forEach(children, (child, index) => {
        if (!isValidElement(child)) {
            return;
        }
        const element = child;
        const elementType = element.type;
        if (elementType === TreeSelectOption) {
            const { key } = element;
            options.push(cloneElement(element, {
                key: key ?? index,
                __dataKey__: key ?? index,
                __dataIndex__: index,
            }));
        }
        else {
            options.push(element);
        }
    });
    return options;
}
function useTreeSelectChildren(children, tabValue) {
    const __children__ = {
        tabs: [],
        options: [],
    };
    Children.forEach(children, (child, index) => {
        if (!isValidElement(child)) {
            return;
        }
        const element = child;
        const elementType = element.type;
        if (elementType === TreeSelectTab) {
            const { key, props } = element;
            const { value: oldValue, children: childrenProp, ...restProps } = props;
            const value = oldValue ?? index;
            __children__.tabs.push(cloneElement(element, {
                key: key ?? value,
                value: value,
                children: childrenProp,
                ...restProps,
            }));
            if (tabValue === value) {
                __children__.options.push(...getTreeSelectOptions(childrenProp));
            }
        }
    });
    return __children__;
}
function TreeSelect(props) {
    const { className, defaultTabValue, tabValue: tabValueProp, defaultValue, value: valueProp, activeIcon = React.createElement(Success, null), children: childrenProp, onTabChange: onTabChangeProp, onChange: onChangeProp, ...restProps } = props;
    const { value: tabValue = 0, setValue: setTabValue } = useUncontrolled({
        value: tabValueProp,
        defaultValue: defaultTabValue,
        onChange: onTabChangeProp,
    });
    const { value = 0, setValue } = useUncontrolled({
        value: valueProp,
        defaultValue,
        onChange: onChangeProp,
    });
    const { tabs, options } = useTreeSelectChildren(childrenProp, tabValue);
    const onOptionClick = useCallback(({ disabled, active, value: evtValue }) => {
        if (disabled) {
            return;
        }
        const multiselect = _isArray(value);
        if (multiselect) {
            if (active) {
                setValue(value.concat(evtValue));
            }
            else {
                setValue(value.filter((aValue) => aValue !== evtValue));
            }
        }
        else {
            setValue(value === evtValue && !active ? undefined : evtValue);
        }
    }, [value, setValue]);
    return (React.createElement(TreeSelectContext.Provider, { value: {
            activeIcon,
            value,
            onOptionClick,
        } },
        React.createElement(View, { className: classNames(prefixClassname("tree-select"), className), ...restProps },
            React.createElement(Sidebar, { className: prefixClassname("tree-select__sidebar"), defaultValue: defaultTabValue, value: tabValue, onChange: (newTab) => setTabValue(newTab), children: tabs }),
            React.createElement(View, { className: prefixClassname("tree-select__content"), children: options }))));
}
export default TreeSelect;
