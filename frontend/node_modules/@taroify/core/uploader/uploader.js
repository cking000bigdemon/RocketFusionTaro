import { useUncontrolled } from "@taroify/hooks/index.js";
import { Close } from "@taroify/icons/index.js";
import { View } from "@tarojs/components";
import classNames from "classnames";
import _filter from "lodash/filter";
import _map from "lodash/map";
import _isEmpty from "lodash/isEmpty";
import * as React from "react";
import { useCallback, useMemo } from "react";
import Loading from "../loading/index.js";
import { prefixClassname } from "../styles/index.js";
import UploaderImage from "./uploader-image.js";
import UploaderMask from "./uploader-mask.js";
import UploaderUpload from "./uploader-upload.js";
import UploaderContext from "./uploader.context.js";
import { getOneUploadFile, getUploadFiles } from "./uploader.shared.js";
function renderUploaderMask(file) {
    return ((file?.status === "uploading" || file?.status === "failed") && (React.createElement(UploaderMask, { icon: file?.status === "uploading" ? (React.createElement(Loading, null)) : file?.status === "failed" ? (React.createElement(Close, null)) : undefined, message: file.message })));
}
function UploadFilesRender(props) {
    const { defaultValue, value: valueProp, disabled, multiple, maxFiles = Number.MAX_VALUE, children, onChange: onChangeProp, } = props;
    const { value = [], setValue } = useUncontrolled({
        defaultValue,
        value: valueProp,
        onChange: onChangeProp,
    });
    const renderImage = useCallback((file, index) => (React.createElement(UploaderImage, { key: index, type: file?.type, url: file?.url, name: file?.name, removable: file?.removable && file?.status !== "uploading" ? true : undefined, children: renderUploaderMask(file), onRemove: () => {
            if (!disabled) {
                if (multiple) {
                    setValue(_filter(value, (item) => item !== file));
                }
                else {
                    setValue(null);
                }
            }
        } })), [disabled, multiple, setValue, value]);
    const files = useMemo(() => {
        if (!multiple) {
            return [];
        }
        const __files__ = _map(getUploadFiles(value), renderImage);
        if (__files__.length < maxFiles) {
            __files__.push(React.createElement(UploaderUpload, { key: "upload", children: children }));
        }
        return __files__;
    }, [maxFiles, multiple, renderImage, value, children]);
    if (_isEmpty(value)) {
        return React.createElement(UploaderUpload, { children: children });
    }
    if (!multiple) {
        const file = getOneUploadFile(value);
        return renderImage(file);
    }
    return files;
}
export default function Uploader(props) {
    const { className, defaultValue, value, disabled = false, removable = true, maxFiles, multiple, children, onUpload, onChange, ...restProps } = props;
    return (React.createElement(UploaderContext.Provider, { value: {
            removable,
            disabled,
            onUpload,
        } },
        React.createElement(View, { className: classNames(prefixClassname("uploader"), className), ...restProps },
            React.createElement(View, { className: classNames(prefixClassname("uploader__wrapper"), {
                    [prefixClassname("uploader__wrapper--disabled")]: disabled,
                }) },
                React.createElement(UploadFilesRender, { defaultValue: defaultValue, value: value, disabled: disabled, maxFiles: maxFiles, multiple: multiple, onChange: onChange, children: children })))));
}
