import { type ReactNode } from "react";
declare function forEachChildren(children: ReactNode | ReactNode[], fn: (child: ReactNode, index: number) => void): void;
declare function mapChildren<T, C extends ReactNode>(children: C | C[], fn: (child: C, index: number) => T): C extends null | undefined ? C : Array<Exclude<T, boolean | null | undefined>>;
declare const Children: {
    toArray: (children: ReactNode | ReactNode[]) => (string | number | import("react").ReactElement<any, string | import("react").JSXElementConstructor<any>> | import("react").ReactFragment | import("react").ReactPortal)[];
    forEach: typeof forEachChildren;
    map: typeof mapChildren;
};
export default Children;
