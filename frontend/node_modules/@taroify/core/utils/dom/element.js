import { createSelectorQuery, getCurrentInstance } from "@tarojs/taro";
import _isEmpty from "lodash/isEmpty";
import _split from "lodash/split";
import { inWechat } from "../base.js";
export const ELEMENT_NODE_TYPE = 1;
export function isWindow(val) {
    return val === window;
}
export function isBodyElement(val) {
    return val === document.body;
}
export function isRootElement(node) {
    return node?.nodeType === ELEMENT_NODE_TYPE && node?.tagName === "ROOT";
}
export function isBlockElement(node) {
    return node?.nodeType === ELEMENT_NODE_TYPE && node?.tagName === "BLOCK";
}
export function elementUnref(elementOrRef) {
    if (elementOrRef === undefined || elementOrRef === null) {
        return elementOrRef;
    }
    if ("current" in elementOrRef) {
        return elementOrRef.current;
    }
    return elementOrRef;
}
export function matchSelector(aSelector, bSelector) {
    return aSelector === bSelector;
}
export function getElementSelector(id, className) {
    const selectors = [];
    if (!_isEmpty(id)) {
        selectors.push(`#${id}`);
    }
    if (!_isEmpty(className)) {
        selectors.push(_split(className, " ").join("."));
    }
    return selectors.join(".");
}
export function prependPageSelector(selector) {
    const path = getCurrentInstance().router?.path;
    return path ? `${path}__${selector}` : selector;
}
export function usePrependPageSelector(selector) {
    const { path } = getCurrentInstance().router || {};
    return path ? `${path}__${selector}` : selector;
}
function getAncestorWrapper(element) {
    if (inWechat) {
        let ancestor = element;
        for (let cursor = element; !_isEmpty(cursor.parentNode);) {
            if (isRootElement(cursor.parentNode)) {
                break;
            }
            if (!isBlockElement(cursor.parentNode)) {
                ancestor = cursor.parentNode;
            }
            cursor = cursor.parentNode;
        }
        if (ancestor && ancestor !== element) {
            return ancestor;
        }
    }
}
export function queryNodesRef(element) {
    if (isRootElement(element)) {
        return createSelectorQuery().selectViewport();
    }
    const ancestor = getAncestorWrapper(element);
    if (ancestor) {
        return createSelectorQuery().select(`#${ancestor.uid}>>>#${element.uid}`);
    }
    return createSelectorQuery().select(`#${element.uid}`);
}
export function queryAllNodesRef(element, selector) {
    if (isRootElement(element)) {
        return createSelectorQuery().selectViewport();
    }
    const ancestor = getAncestorWrapper(element);
    if (ancestor) {
        return createSelectorQuery().selectAll(`#${ancestor.uid}>>>#${element.uid} ${selector}`);
    }
    return createSelectorQuery().selectAll(`#${element.uid}${selector}`);
}
