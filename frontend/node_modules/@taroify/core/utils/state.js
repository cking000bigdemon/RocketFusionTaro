import { useForceUpdate } from "@taroify/hooks/index.js";
import _isEqual from "lodash/isEqual";
import { createRef, useCallback, useEffect, useMemo, useRef, } from "react";
export { useToRef } from "@taroify/hooks/index.js";
export function usePreviousRef(value) {
    const previousRef = useRef(value);
    useEffect(() => {
        previousRef.current = value;
    });
    return previousRef;
}
export function usePrevious(state) {
    return usePreviousRef(state).current;
}
export function useRendered(cb) {
    return cb?.();
}
export function useRenderedRef(cb) {
    const stateRef = useRef();
    if (cb) {
        stateRef.current = cb();
    }
    return stateRef;
}
export function useRefs() {
    const refs = useRef([]);
    const setRefs = useCallback((index) => (el) => {
        if (!refs.current[index]) {
            refs.current[index] = createRef();
        }
        refs.current[index].current = el;
    }, []);
    const getRef = useCallback((index) => refs.current[index], []);
    const getRefs = useCallback(() => refs.current, []);
    const clearRefs = useCallback(() => (refs.current = []), []);
    return useMemo(() => ({
        refs,
        getRef,
        getRefs,
        setRefs,
        clearRefs,
    }), [clearRefs, getRef, getRefs, setRefs]);
}
export function useObject(state) {
    const forceUpdate = useForceUpdate();
    const stateRef = useRef(state);
    const currentRef = useRef();
    const previousRef = useRef();
    if (!_isEqual(currentRef.current, state)) {
        previousRef.current = currentRef.current;
        currentRef.current = state;
        stateRef.current = state;
    }
    const setObject = useCallback((newState) => {
        stateRef.current = { ...stateRef.current, ...newState };
        forceUpdate();
    }, []);
    const getObject = useCallback(() => stateRef.current, []);
    return useMemo(() => ({ object: stateRef.current, getObject, setObject }), [stateRef.current, getObject, setObject]);
}
