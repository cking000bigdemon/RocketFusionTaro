import _get from "lodash/get";
import _isUndefined from "lodash/isUndefined";
import _isEmpty from "lodash/isEmpty";
import _clamp from "lodash/clamp";
import _size from "lodash/size";
import _range from "lodash/range";
import _isEqual from "lodash/isEqual";
import { useEffect, useMemo } from "react";
import useToRef from "../use-to-ref/index.js";
import { findCascadeOption } from "./use-cascader.shared.js";
function doCascadeSelect({ value: values, data: options }) {
    const newValues = [];
    const newColumns = [];
    newColumns.push({ children: options });
    let cursorOptions = options;
    let depth = 0;
    for (;;) {
        const value = _get(values, depth);
        const nextOption = findCascadeOption(cursorOptions, value, true);
        if (_isUndefined(nextOption)) {
            break;
        }
        const { value: newValue, children: nextOptions } = nextOption;
        newValues.push(newValue);
        if (!nextOptions || _isEmpty(nextOptions)) {
            break;
        }
        newColumns.push(nextOption);
        cursorOptions = nextOptions;
        depth++;
    }
    return [newColumns, newValues];
}
function useCascadeSelect(options) {
    const { value, data, depth } = options;
    return useMemo(() => doCascadeSelect({
        value,
        data,
        depth,
    }), [data, depth, value]);
}
export default function useCascaderNew({ value: values = [], depth: maxDepth = 0, data = [], onChange, }) {
    maxDepth = _clamp(maxDepth, 0, maxDepth);
    const onChangeRef = useToRef(onChange);
    const [columns, newValues] = useCascadeSelect({ value: values, depth: maxDepth, data });
    useEffect(() => {
        if (maxDepth !== 0 && maxDepth > _size(columns)) {
            _range(maxDepth - _size(columns))
                .map(() => [])
                .forEach((e) => columns.push(e));
        }
        if (!_isEqual(values, newValues)) {
            onChangeRef.current?.(newValues);
        }
    }, [columns, maxDepth, newValues, onChangeRef, values]);
    return {
        columns,
    };
}
