import _clamp from "lodash/clamp";
import _isEmpty from "lodash/isEmpty";
import _isUndefined from "lodash/isUndefined";
import _size from "lodash/size";
import _range from "lodash/range";
import { useEffect, useState, useRef } from "react";
const emptyArr = [];
const defaultFieldNames = {
    label: "label",
    value: "value",
    children: "children",
};
export default function useCascaderOld({ value: values = emptyArr, depth = 0, options, fieldNames = defaultFieldNames, refreshKey = 0, }) {
    depth = _clamp(depth, 0, depth);
    const cacheMapRef = useRef(new Map());
    const [columns, setColumns] = useState([]);
    useEffect(() => {
        return () => {
            cacheMapRef.current.clear();
        };
    }, [options]);
    useEffect(() => {
        if (options === undefined) {
            return;
        }
        const newColumns = [];
        newColumns.push(options);
        if (!_isEmpty(values)) {
            let cursorOptions = options;
            for (const value of values) {
                if (!cacheMapRef.current.has(value)) {
                    cursorOptions.forEach((item) => {
                        cacheMapRef.current.set(item[fieldNames.value], item);
                    });
                }
                const nextOption = cacheMapRef.current.get(value);
                if (_isUndefined(nextOption)) {
                    break;
                }
                const nextOptions = nextOption[fieldNames.children];
                if (!nextOptions || _isEmpty(nextOptions)) {
                    break;
                }
                cursorOptions = nextOptions;
                newColumns.push(nextOptions);
            }
        }
        if (depth !== 0 && depth > _size(newColumns)) {
            _range(depth - _size(newColumns)).forEach(() => newColumns.push([]));
        }
        setColumns(newColumns);
    }, [depth, options, values, fieldNames, refreshKey]);
    return {
        columns,
    };
}
