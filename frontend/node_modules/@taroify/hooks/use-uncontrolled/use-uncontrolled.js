import _isUndefined from "lodash/isUndefined";
import { useCallback, useMemo, useRef } from "react";
import useForceUpdate from "../use-force-update/index.js";
import useToRef from "../use-to-ref/index.js";
export default function useUncontrolled(options = {}) {
    const { defaultValue, value: valueProp, onChange } = options;
    const forceUpdate = useForceUpdate();
    const valueRef = useToRef(valueProp);
    const stateRef = useRef(defaultValue ?? valueRef.current);
    if (valueRef.current !== undefined) {
        stateRef.current = valueRef.current;
    }
    const setValue = useCallback((newValue, emitChange) => {
        const changed = stateRef.current !== newValue;
        if (changed) {
            if (_isUndefined(valueRef.current)) {
                stateRef.current = newValue;
                forceUpdate();
            }
            ;
            (emitChange ?? onChange)?.(newValue);
        }
    }, [onChange]);
    const getValue = useCallback(() => stateRef.current, []);
    return useMemo(() => ({
        value: stateRef.current,
        getValue,
        setValue,
    }), [stateRef.current, getValue, setValue]);
}
